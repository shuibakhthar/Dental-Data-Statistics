#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 23, 2020 12:09:03 PM IST  platform: Windows NT

import sys
import upload_image_window_support
import upload_image_window
import datetime
from tkcalendar import DateEntry
from tkinter import messagebox
from tkinter import *
from PIL import *
import os
import numpy
from tkinter import filedialog
from PIL import Image


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import screening_camp_window_support
from db import Database

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    # screening_camp_window_support.set_Tk_var()
    top = Screening_Camp_Window (root)
    screening_camp_window_support.init(root, top)
    root.mainloop()

w = None
def create_Screening_Camp_Window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    # screening_camp_window_support.set_Tk_var()
    top = Screening_Camp_Window (w)
    screening_camp_window_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Screening_Camp_Window():
    global w
    w.destroy()
    w = None

class Screening_Camp_Window:
    def __init__(self, Screening_Camp_Window=None):
        '''This class configures and populates the toplevel window.
           Department_Window is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {Courier New} -size 13 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        self.data = Database("dental.db")
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        Screening_Camp_Window.geometry("1491x764+35+31")
        Screening_Camp_Window.minsize(148, 1)
        Screening_Camp_Window.maxsize(4112, 1030)
        Screening_Camp_Window.resizable(1, 1)
        Screening_Camp_Window.title("DENTAL CAMP ")
        Screening_Camp_Window.configure(background="#40b3a2")

        self.menubar = tk.Menu(Screening_Camp_Window, font=font9, bg=_bgcolor, fg=_fgcolor)
        Screening_Camp_Window.configure(menu = self.menubar)

        self.File = tk.Menu(Screening_Camp_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.File,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 compound="left",
                                 foreground="#000000",
                                 label="File")
        self.File.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                foreground="#000000",
                label="Exit",
                command= screening_camp_window_support.destroy_window)

        self.Screen_Camp_Label = tk.Label(Screening_Camp_Window)
        self.Screen_Camp_Label.place(relx=0.201, rely=0.027, relwidth=0.518, relheight=0.084)

        self.Screen_Camp_Label.configure(activebackground="#f9f9f9")
        self.Screen_Camp_Label.configure(activeforeground="black")
        self.Screen_Camp_Label.configure(background="#d9d9d9")
        self.Screen_Camp_Label.configure(disabledforeground="#a3a3a3")
        self.Screen_Camp_Label.configure(font="-family {Helvatica} -size 18 -weight normal")
        self.Screen_Camp_Label.configure(foreground="#000000")
        self.Screen_Camp_Label.configure(highlightbackground="#d9d9d9")
        self.Screen_Camp_Label.configure(highlightcolor="black")
        self.Screen_Camp_Label.configure(relief="raised")
        self.Screen_Camp_Label.configure(text='''Dental Camp Patient''')

        self.Place_Label = tk.Label(Screening_Camp_Window)
        self.Place_Label.place(relx=0.335, rely=0.12, relwidth=0.162, relheight=0.05)
        self.Place_Label.configure(activebackground="#f9f9f9")
        self.Place_Label.configure(activeforeground="black")
        self.Place_Label.configure(background="#d9d9d9")
        self.Place_Label.configure(disabledforeground="#a3a3a3")
        self.Place_Label.configure(font="-family {Helvetica} -size 13 -weight normal -slant " \
                                        "roman -underline 0 -overstrike 0")
        self.Place_Label.configure(foreground="#000000")
        self.Place_Label.configure(highlightbackground="#d9d9d9")
        self.Place_Label.configure(highlightcolor="black")
        self.Place_Label.configure(text='''* Place''')

        self.Place_Entry = tk.Entry(Screening_Camp_Window)
        self.Place_Entry.place(relx=0.51, rely=0.12, relheight=0.048, relwidth=0.137)
        self.Place_Entry.configure(background="white")
        self.Place_Entry.configure(disabledforeground="#a3a3a3")
        self.Place_Entry.configure(font="-family {Helvetica} -size 13 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0")
        self.Place_Entry.configure(foreground="#000000")
        self.Place_Entry.configure(highlightbackground="#d9d9d9")
        self.Place_Entry.configure(highlightcolor="black")
        self.Place_Entry.configure(insertbackground="black")
        self.Place_Entry.configure(selectbackground="#c4c4c4")
        self.Place_Entry.configure(selectforeground="black")

        self.Address_Label = tk.Label(Screening_Camp_Window)
        self.Address_Label.place(relx=0.655, rely=0.12, relwidth=0.162, relheight=0.05)
        self.Address_Label.configure(activebackground="#f9f9f9")
        self.Address_Label.configure(activeforeground="black")
        self.Address_Label.configure(background="#d9d9d9")
        self.Address_Label.configure(disabledforeground="#a3a3a3")
        self.Address_Label.configure(font="-family {Helvetica} -size 13 -weight normal -slant " \
                                        "roman -underline 0 -overstrike 0")
        self.Address_Label.configure(foreground="#000000")
        self.Address_Label.configure(highlightbackground="#d9d9d9")
        self.Address_Label.configure(highlightcolor="black")
        self.Address_Label.configure(text='''* Address''')

        self.Address_Entry = tk.Entry(Screening_Camp_Window)
        self.Address_Entry.place(relx=0.83, rely=0.12, relheight=0.048, relwidth=0.157)
        self.Address_Entry.configure(background="white")
        self.Address_Entry.configure(disabledforeground="#a3a3a3")
        self.Address_Entry.configure(font="-family {Helvetica} -size 13 -weight normal -slant " \
                                        "roman -underline 0 -overstrike 0")
        self.Address_Entry.configure(foreground="#000000")
        self.Address_Entry.configure(highlightbackground="#d9d9d9")
        self.Address_Entry.configure(highlightcolor="black")
        self.Address_Entry.configure(insertbackground="black")
        self.Address_Entry.configure(selectbackground="#c4c4c4")
        self.Address_Entry.configure(selectforeground="black")

        self.Organiser_Label = tk.Label(Screening_Camp_Window)
        self.Organiser_Label.place(relx=0.013, rely=0.189, relwidth=0.109, relheight=0.05)
        self.Organiser_Label.configure(activebackground="#f9f9f9")
        self.Organiser_Label.configure(activeforeground="black")
        self.Organiser_Label.configure(background="#d9d9d9")
        self.Organiser_Label.configure(disabledforeground="#a3a3a3")
        self.Organiser_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Organiser_Label.configure(foreground="#000000")
        self.Organiser_Label.configure(highlightbackground="#d9d9d9")
        self.Organiser_Label.configure(highlightcolor="black")
        self.Organiser_Label.configure(text=''' * Organiser''')

        self.Organiser_Entry = tk.Entry(Screening_Camp_Window)
        self.Organiser_Entry.place(relx=0.129, rely=0.189, relheight=0.048
                                   , relwidth=0.107)
        self.Organiser_Entry.configure(background="white")
        self.Organiser_Entry.configure(disabledforeground="#a3a3a3")
        self.Organiser_Entry.configure(font="-family {Helvatica} -size 10")
        self.Organiser_Entry.configure(foreground="#000000")
        self.Organiser_Entry.configure(highlightbackground="#d9d9d9")
        self.Organiser_Entry.configure(highlightcolor="black")
        self.Organiser_Entry.configure(insertbackground="black")
        self.Organiser_Entry.configure(selectbackground="#c4c4c4")
        self.Organiser_Entry.configure(selectforeground="black")

        self.OPhone_Label = tk.Label(Screening_Camp_Window)
        self.OPhone_Label.place(relx=0.243, rely=0.189, relwidth=0.109, relheight=0.05)
        self.OPhone_Label.configure(activebackground="#f9f9f9")
        self.OPhone_Label.configure(activeforeground="black")
        self.OPhone_Label.configure(background="#d9d9d9")
        self.OPhone_Label.configure(disabledforeground="#a3a3a3")
        self.OPhone_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.OPhone_Label.configure(foreground="#000000")
        self.OPhone_Label.configure(highlightbackground="#d9d9d9")
        self.OPhone_Label.configure(highlightcolor="black")
        self.OPhone_Label.configure(text='''* Phone''')

        self.OPhone_Entry = tk.Entry(Screening_Camp_Window)
        self.OPhone_Entry.place(relx=0.360, rely=0.189, relheight=0.048, relwidth=0.107)
        self.OPhone_Entry.configure(background="white")
        self.OPhone_Entry.configure(disabledforeground="#a3a3a3")
        self.OPhone_Entry.configure(font="-family {Helvatica} -size 10")
        self.OPhone_Entry.configure(foreground="#000000")
        self.OPhone_Entry.configure(highlightbackground="#d9d9d9")
        self.OPhone_Entry.configure(highlightcolor="black")
        self.OPhone_Entry.configure(insertbackground="black")
        self.OPhone_Entry.configure(selectbackground="#c4c4c4")
        self.OPhone_Entry.configure(selectforeground="black")

        self.Incharge_Label = tk.Label(Screening_Camp_Window)
        self.Incharge_Label.place(relx=0.480, rely=0.189, relwidth=0.109, relheight=0.05)
        self.Incharge_Label.configure(activebackground="#f9f9f9")
        self.Incharge_Label.configure(activeforeground="black")
        self.Incharge_Label.configure(background="#d9d9d9")
        self.Incharge_Label.configure(disabledforeground="#a3a3a3")
        self.Incharge_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Incharge_Label.configure(foreground="#000000")
        self.Incharge_Label.configure(highlightbackground="#d9d9d9")
        self.Incharge_Label.configure(highlightcolor="black")
        self.Incharge_Label.configure(text='''* Incharge''')

        self.Incharge_Entry = tk.Entry(Screening_Camp_Window)
        self.Incharge_Entry.place(relx=0.60, rely=0.189, relheight=0.048, relwidth=0.107)
        self.Incharge_Entry.configure(background="white")
        self.Incharge_Entry.configure(disabledforeground="#a3a3a3")
        self.Incharge_Entry.configure(font="-family {Helvatica} -size 10")
        self.Incharge_Entry.configure(foreground="#000000")
        self.Incharge_Entry.configure(highlightbackground="#d9d9d9")
        self.Incharge_Entry.configure(highlightcolor="black")
        self.Incharge_Entry.configure(insertbackground="black")
        self.Incharge_Entry.configure(selectbackground="#c4c4c4")
        self.Incharge_Entry.configure(selectforeground="black")

        self.IPhone_Label = tk.Label(Screening_Camp_Window)
        self.IPhone_Label.place(relx=0.720, rely=0.189, relwidth=0.109, relheight=0.05)
        self.IPhone_Label.configure(activebackground="#f9f9f9")
        self.IPhone_Label.configure(activeforeground="black")
        self.IPhone_Label.configure(background="#d9d9d9")
        self.IPhone_Label.configure(disabledforeground="#a3a3a3")
        self.IPhone_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.IPhone_Label.configure(foreground="#000000")
        self.IPhone_Label.configure(highlightbackground="#d9d9d9")
        self.IPhone_Label.configure(highlightcolor="black")
        self.IPhone_Label.configure(text='''* Phone''')

        self.IPhone_Entry = tk.Entry(Screening_Camp_Window)
        self.IPhone_Entry.place(relx=0.840, rely=0.189, relheight=0.048, relwidth=0.107)
        self.IPhone_Entry.configure(background="white")
        self.IPhone_Entry.configure(disabledforeground="#a3a3a3")
        self.IPhone_Entry.configure(font="-family {Helvatica} -size 10")
        self.IPhone_Entry.configure(foreground="#000000")
        self.IPhone_Entry.configure(highlightbackground="#d9d9d9")
        self.IPhone_Entry.configure(highlightcolor="black")
        self.IPhone_Entry.configure(insertbackground="black")
        self.IPhone_Entry.configure(selectbackground="#c4c4c4")
        self.IPhone_Entry.configure(selectforeground="black")

        self.Date_Label = tk.Label(Screening_Camp_Window)
        self.Date_Label.place(relx=0.013, rely=0.12, relwidth=0.169, relheight=0.05)
        self.Date_Label.configure(activebackground="#f9f9f9")
        self.Date_Label.configure(activeforeground="black")
        self.Date_Label.configure(background="#d9d9d9")
        self.Date_Label.configure(disabledforeground="#a3a3a3")
        self.Date_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Date_Label.configure(foreground="#000000")
        self.Date_Label.configure(highlightbackground="#d9d9d9")
        self.Date_Label.configure(highlightcolor="black")
        self.Date_Label.configure(text='''* Date\nYYYY-MM-DD''')

        now = datetime.datetime.now()
        self.Date_Entry = DateEntry(Screening_Camp_Window, year=now.year, month=now.month, day=now.day)
        self.Date_Entry.place(relx=0.188, rely=0.12, relheight=0.048, relwidth=0.137)
        self.Date_Entry.configure(background="white")
        self.Date_Entry.configure(date_pattern='y-mm-dd')
        self.Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.Date_Entry.configure(foreground="#000000")
        self.Date_Entry.configure(borderwidth=2)
        self.Date_Entry.configure(width=12)

        # self.Date_Entry = tk.Entry(Screening_Camp_Window)
        # self.Date_Entry.place(relx=0.188, rely=0.12, relheight=0.048, relwidth=0.137)
        # self.Date_Entry.configure(background="white")
        # self.Date_Entry.configure(disabledforeground="#a3a3a3")
        # self.Date_Entry.configure(font="-family {Helvatica} -size 10")
        # self.Date_Entry.configure(foreground="#000000")
        # self.Date_Entry.configure(highlightbackground="#d9d9d9")
        # self.Date_Entry.configure(highlightcolor="black")
        # self.Date_Entry.configure(insertbackground="black")
        # self.Date_Entry.configure(selectbackground="#c4c4c4")
        # self.Date_Entry.configure(selectforeground="black")

        self.From_Label = tk.Label(Screening_Camp_Window)
        self.From_Label.place(relx=0.013, rely=0.311, relwidth=0.162, relheight=0.05)
        self.From_Label.configure(activebackground="#f9f9f9")
        self.From_Label.configure(activeforeground="black")
        self.From_Label.configure(background="#d9d9d9")
        self.From_Label.configure(disabledforeground="#a3a3a3")
        self.From_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.From_Label.configure(foreground="#000000")
        self.From_Label.configure(highlightbackground="#d9d9d9")
        self.From_Label.configure(highlightcolor="black")
        self.From_Label.configure(text='''* ID From''')

        self.From_Entry = tk.Entry(Screening_Camp_Window)
        self.From_Entry.place(relx=0.188, rely=0.311, relwidth=0.137, relheight=0.048)
        self.From_Entry.configure(background="white")
        self.From_Entry.configure(disabledforeground="#a3a3a3")
        self.From_Entry.configure(font="-family {Helvatica} -size 10")
        self.From_Entry.configure(foreground="#000000")
        self.From_Entry.configure(highlightbackground="#d9d9d9")
        self.From_Entry.configure(highlightcolor="black")
        self.From_Entry.configure(insertbackground="black")
        self.From_Entry.configure(selectbackground="#c4c4c4")
        self.From_Entry.configure(selectforeground="black")

        self.To_Label = tk.Label(Screening_Camp_Window)
        self.To_Label.place(relx=0.335, rely=0.311, relwidth=0.162, relheight=0.05)
        self.To_Label.configure(activebackground="#f9f9f9")
        self.To_Label.configure(activeforeground="black")
        self.To_Label.configure(background="#d9d9d9")
        self.To_Label.configure(disabledforeground="#a3a3a3")
        self.To_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.To_Label.configure(foreground="#000000")
        self.To_Label.configure(highlightbackground="#d9d9d9")
        self.To_Label.configure(highlightcolor="black")
        self.To_Label.configure(text='''* ID To''')

        self.To_Entry = tk.Entry(Screening_Camp_Window)
        self.To_Entry.place(relx=0.51, rely=0.311, relwidth=0.137, relheight=0.048)
        self.To_Entry.configure(background="white")
        self.To_Entry.configure(disabledforeground="#a3a3a3")
        self.To_Entry.configure(font="-family {Helvatica} -size 10")
        self.To_Entry.configure(foreground="#000000")
        self.To_Entry.configure(highlightbackground="#d9d9d9")
        self.To_Entry.configure(highlightcolor="black")
        self.To_Entry.configure(insertbackground="black")
        self.To_Entry.configure(selectbackground="#c4c4c4")
        self.To_Entry.configure(selectforeground="black")


        self.Endodontics_Label = tk.Label(Screening_Camp_Window)
        self.Endodontics_Label.place(relx=0.013, rely=0.379, relwidth=0.162, relheight=0.05)
        self.Endodontics_Label.configure(activebackground="#f9f9f9")
        self.Endodontics_Label.configure(activeforeground="black")
        self.Endodontics_Label.configure(background="#d9d9d9")
        self.Endodontics_Label.configure(disabledforeground="#a3a3a3")
        self.Endodontics_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Endodontics_Label.configure(foreground="#000000")
        self.Endodontics_Label.configure(highlightbackground="#d9d9d9")
        self.Endodontics_Label.configure(highlightcolor="black")
        self.Endodontics_Label.configure(text='''Endodontics''')

        self.Periodont_Label = tk.Label(Screening_Camp_Window)
        self.Periodont_Label.place(relx=0.013, rely=0.447, relwidth=0.162, relheight=0.05)
        self.Periodont_Label.configure(activebackground="#f9f9f9")
        self.Periodont_Label.configure(activeforeground="black")
        self.Periodont_Label.configure(background="#d9d9d9")
        self.Periodont_Label.configure(disabledforeground="#a3a3a3")
        self.Periodont_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Periodont_Label.configure(foreground="#000000")
        self.Periodont_Label.configure(highlightbackground="#d9d9d9")
        self.Periodont_Label.configure(highlightcolor="black")
        self.Periodont_Label.configure(text='''Periodontics''')

        self.Orthodontics_Label = tk.Label(Screening_Camp_Window)
        self.Orthodontics_Label.place(relx=0.013, rely=0.514, relwidth=0.162, relheight=0.05)
        self.Orthodontics_Label.configure(activebackground="#f9f9f9")
        self.Orthodontics_Label.configure(activeforeground="black")
        self.Orthodontics_Label.configure(background="#d9d9d9")
        self.Orthodontics_Label.configure(disabledforeground="#a3a3a3")
        self.Orthodontics_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Orthodontics_Label.configure(foreground="#000000")
        self.Orthodontics_Label.configure(highlightbackground="#d9d9d9")
        self.Orthodontics_Label.configure(highlightcolor="black")
        self.Orthodontics_Label.configure(text='''Orthodontics''')

        self.Surgery_Label = tk.Label(Screening_Camp_Window)
        self.Surgery_Label.place(relx=0.013, rely=0.582, relwidth=0.162, relheight=0.05)
        self.Surgery_Label.configure(activebackground="#f9f9f9")
        self.Surgery_Label.configure(activeforeground="black")
        self.Surgery_Label.configure(background="#d9d9d9")
        self.Surgery_Label.configure(disabledforeground="#a3a3a3")
        self.Surgery_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Surgery_Label.configure(foreground="#000000")
        self.Surgery_Label.configure(highlightbackground="#d9d9d9")
        self.Surgery_Label.configure(highlightcolor="black")
        self.Surgery_Label.configure(text='''Oral Surgery''')

        self.Pedodont_Label = tk.Label(Screening_Camp_Window)
        self.Pedodont_Label.place(relx=0.013, rely=0.65, relwidth=0.162, relheight=0.05)
        self.Pedodont_Label.configure(activebackground="#f9f9f9")
        self.Pedodont_Label.configure(activeforeground="black")
        self.Pedodont_Label.configure(background="#d9d9d9")
        self.Pedodont_Label.configure(disabledforeground="#a3a3a3")
        self.Pedodont_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Pedodont_Label.configure(foreground="#000000")
        self.Pedodont_Label.configure(highlightbackground="#d9d9d9")
        self.Pedodont_Label.configure(highlightcolor="black")
        self.Pedodont_Label.configure(text='''Pedodontics''')

        self.Endodontics_Entry = tk.Entry(Screening_Camp_Window)
        self.Endodontics_Entry.place(relx=0.188, rely=0.379, relwidth=0.137, relheight=0.048)
        self.Endodontics_Entry.configure(background="white")
        self.Endodontics_Entry.configure(disabledforeground="#a3a3a3")
        self.Endodontics_Entry.configure(font="-family {Helvatica} -size 10")
        self.Endodontics_Entry.configure(foreground="#000000")
        self.Endodontics_Entry.configure(highlightbackground="#d9d9d9")
        self.Endodontics_Entry.configure(highlightcolor="black")
        self.Endodontics_Entry.configure(insertbackground="black")
        self.Endodontics_Entry.configure(selectbackground="#c4c4c4")
        self.Endodontics_Entry.configure(selectforeground="black")

        self.Periodont_Entry = tk.Entry(Screening_Camp_Window)
        self.Periodont_Entry.place(relx=0.188, rely=0.447, relwidth=0.137, relheight=0.048)
        self.Periodont_Entry.configure(background="white")
        self.Periodont_Entry.configure(disabledforeground="#a3a3a3")
        self.Periodont_Entry.configure(font="-family {Helvatica} -size 10")
        self.Periodont_Entry.configure(foreground="#000000")
        self.Periodont_Entry.configure(highlightbackground="#d9d9d9")
        self.Periodont_Entry.configure(highlightcolor="black")
        self.Periodont_Entry.configure(insertbackground="black")
        self.Periodont_Entry.configure(selectbackground="#c4c4c4")
        self.Periodont_Entry.configure(selectforeground="black")

        self.Orthodontics_Entry = tk.Entry(Screening_Camp_Window)
        self.Orthodontics_Entry.place(relx=0.188, rely=0.514, relwidth=0.137, relheight=0.048)
        self.Orthodontics_Entry.configure(background="white")
        self.Orthodontics_Entry.configure(disabledforeground="#a3a3a3")
        self.Orthodontics_Entry.configure(font="-family {Helvatica} -size 10")
        self.Orthodontics_Entry.configure(foreground="#000000")
        self.Orthodontics_Entry.configure(highlightbackground="#d9d9d9")
        self.Orthodontics_Entry.configure(highlightcolor="black")
        self.Orthodontics_Entry.configure(insertbackground="black")
        self.Orthodontics_Entry.configure(selectbackground="#c4c4c4")
        self.Orthodontics_Entry.configure(selectforeground="black")

        self.Surgery_Entry = tk.Entry(Screening_Camp_Window)
        self.Surgery_Entry.place(relx=0.188, rely=0.582, relwidth=0.137, relheight=0.048)
        self.Surgery_Entry.configure(background="white")
        self.Surgery_Entry.configure(disabledforeground="#a3a3a3")
        self.Surgery_Entry.configure(font="-family {Helvatica} -size 10")
        self.Surgery_Entry.configure(foreground="#000000")
        self.Surgery_Entry.configure(highlightbackground="#d9d9d9")
        self.Surgery_Entry.configure(highlightcolor="black")
        self.Surgery_Entry.configure(insertbackground="black")
        self.Surgery_Entry.configure(selectbackground="#c4c4c4")
        self.Surgery_Entry.configure(selectforeground="black")

        self.Pedodont_Entry = tk.Entry(Screening_Camp_Window)
        self.Pedodont_Entry.place(relx=0.188, rely=0.65, relwidth=0.137, relheight=0.048)
        self.Pedodont_Entry.configure(background="white")
        self.Pedodont_Entry.configure(disabledforeground="#a3a3a3")
        self.Pedodont_Entry.configure(font="-family {Helvatica} -size 10")
        self.Pedodont_Entry.configure(foreground="#000000")
        self.Pedodont_Entry.configure(highlightbackground="#d9d9d9")
        self.Pedodont_Entry.configure(highlightcolor="black")
        self.Pedodont_Entry.configure(insertbackground="black")
        self.Pedodont_Entry.configure(selectbackground="#c4c4c4")
        self.Pedodont_Entry.configure(selectforeground="black")

        self.Oralpatho_Entry = tk.Entry(Screening_Camp_Window)
        self.Oralpatho_Entry.place(relx=0.51, rely=0.379, relwidth=0.137, relheight=0.048)
        self.Oralpatho_Entry.configure(background="white")
        self.Oralpatho_Entry.configure(disabledforeground="#a3a3a3")
        self.Oralpatho_Entry.configure(font="-family {Helvatica} -size 10")
        self.Oralpatho_Entry.configure(foreground="#000000")
        self.Oralpatho_Entry.configure(highlightbackground="#d9d9d9")
        self.Oralpatho_Entry.configure(highlightcolor="black")
        self.Oralpatho_Entry.configure(insertbackground="black")
        self.Oralpatho_Entry.configure(selectbackground="#c4c4c4")
        self.Oralpatho_Entry.configure(selectforeground="black")

        self.Public_Health_Entry = tk.Entry(Screening_Camp_Window)
        self.Public_Health_Entry.place(relx=0.51, rely=0.447, relwidth=0.137, relheight=0.048)
        self.Public_Health_Entry.configure(background="white")
        self.Public_Health_Entry.configure(disabledforeground="#a3a3a3")
        self.Public_Health_Entry.configure(font="-family {Helvatica} -size 10")
        self.Public_Health_Entry.configure(foreground="#000000")
        self.Public_Health_Entry.configure(highlightbackground="#d9d9d9")
        self.Public_Health_Entry.configure(highlightcolor="black")
        self.Public_Health_Entry.configure(insertbackground="black")
        self.Public_Health_Entry.configure(selectbackground="#c4c4c4")
        self.Public_Health_Entry.configure(selectforeground="black")

        self.Prostho_Entry = tk.Entry(Screening_Camp_Window)
        self.Prostho_Entry.place(relx=0.51, rely=0.582, relwidth=0.137, relheight=0.048)
        self.Prostho_Entry.configure(background="white")
        self.Prostho_Entry.configure(disabledforeground="#a3a3a3")
        self.Prostho_Entry.configure(font="-family {Helvatica} -size 10")
        self.Prostho_Entry.configure(foreground="#000000")
        self.Prostho_Entry.configure(highlightbackground="#d9d9d9")
        self.Prostho_Entry.configure(highlightcolor="black")
        self.Prostho_Entry.configure(insertbackground="black")
        self.Prostho_Entry.configure(selectbackground="#c4c4c4")
        self.Prostho_Entry.configure(selectforeground="black")

        self.Oral_Mea_Entry = tk.Entry(Screening_Camp_Window)
        self.Oral_Mea_Entry.place(relx=0.51, rely=0.514, relwidth=0.137, relheight=0.048)
        self.Oral_Mea_Entry.configure(background="white")
        self.Oral_Mea_Entry.configure(disabledforeground="#a3a3a3")
        self.Oral_Mea_Entry.configure(font="-family {Helvatica} -size 10")
        self.Oral_Mea_Entry.configure(foreground="#000000")
        self.Oral_Mea_Entry.configure(highlightbackground="#d9d9d9")
        self.Oral_Mea_Entry.configure(highlightcolor="black")
        self.Oral_Mea_Entry.configure(insertbackground="black")
        self.Oral_Mea_Entry.configure(selectbackground="#c4c4c4")
        self.Oral_Mea_Entry.configure(selectforeground="black")

        self.Grand_Total_Entry = tk.Entry(Screening_Camp_Window)
        self.Grand_Total_Entry.place(relx=0.51, rely=0.65, relwidth=0.137, relheight=0.048)
        self.Grand_Total_Entry.configure(background="white")
        self.Grand_Total_Entry.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Entry.configure(font="-family {Helvatica} -size 10")
        self.Grand_Total_Entry.configure(foreground="#000000")
        self.Grand_Total_Entry.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Entry.configure(highlightcolor="black")
        self.Grand_Total_Entry.configure(insertbackground="black")
        self.Grand_Total_Entry.configure(selectbackground="#c4c4c4")
        self.Grand_Total_Entry.configure(selectforeground="black")

        self.Oralpatho_Label = tk.Label(Screening_Camp_Window)
        self.Oralpatho_Label.place(relx=0.335, rely=0.379, relwidth=0.162, relheight=0.05)
        self.Oralpatho_Label.configure(activebackground="#f9f9f9")
        self.Oralpatho_Label.configure(activeforeground="black")
        self.Oralpatho_Label.configure(background="#d9d9d9")
        self.Oralpatho_Label.configure(disabledforeground="#a3a3a3")
        self.Oralpatho_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Oralpatho_Label.configure(foreground="#000000")
        self.Oralpatho_Label.configure(highlightbackground="#d9d9d9")
        self.Oralpatho_Label.configure(highlightcolor="black")
        self.Oralpatho_Label.configure(text='''Oral Pathology''')

        self.Public_Health_Label = tk.Label(Screening_Camp_Window)
        self.Public_Health_Label.place(relx=0.335, rely=0.447, relwidth=0.162, relheight=0.05)
        self.Public_Health_Label.configure(activebackground="#f9f9f9")
        self.Public_Health_Label.configure(activeforeground="black")
        self.Public_Health_Label.configure(background="#d9d9d9")
        self.Public_Health_Label.configure(disabledforeground="#a3a3a3")
        self.Public_Health_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Public_Health_Label.configure(foreground="#000000")
        self.Public_Health_Label.configure(highlightbackground="#d9d9d9")
        self.Public_Health_Label.configure(highlightcolor="black")
        self.Public_Health_Label.configure(text='''Public Health''')

        self.Oral_Mea_Label = tk.Label(Screening_Camp_Window)
        self.Oral_Mea_Label.place(relx=0.335, rely=0.514, relwidth=0.162, relheight=0.05)
        self.Oral_Mea_Label.configure(activebackground="#f9f9f9")
        self.Oral_Mea_Label.configure(activeforeground="black")
        self.Oral_Mea_Label.configure(background="#d9d9d9")
        self.Oral_Mea_Label.configure(disabledforeground="#a3a3a3")
        self.Oral_Mea_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Oral_Mea_Label.configure(foreground="#000000")
        self.Oral_Mea_Label.configure(highlightbackground="#d9d9d9")
        self.Oral_Mea_Label.configure(highlightcolor="black")
        self.Oral_Mea_Label.configure(text='''Oral Medicine''')

        self.Prostho_Label = tk.Label(Screening_Camp_Window)
        self.Prostho_Label.place(relx=0.335, rely=0.582, relwidth=0.162, relheight=0.05)
        self.Prostho_Label.configure(activebackground="#f9f9f9")
        self.Prostho_Label.configure(activeforeground="black")
        self.Prostho_Label.configure(background="#d9d9d9")
        self.Prostho_Label.configure(disabledforeground="#a3a3a3")
        self.Prostho_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Prostho_Label.configure(foreground="#000000")
        self.Prostho_Label.configure(highlightbackground="#d9d9d9")
        self.Prostho_Label.configure(highlightcolor="black")
        self.Prostho_Label.configure(text='''Prosthodontics''')

        self.Grand_Total_Label = tk.Label(Screening_Camp_Window)
        self.Grand_Total_Label.place(relx=0.335, rely=0.65, relwidth=0.162, relheight=0.05)

        self.Grand_Total_Label.configure(activebackground="#f9f9f9")
        self.Grand_Total_Label.configure(activeforeground="black")
        self.Grand_Total_Label.configure(background="#d9d9d9")
        self.Grand_Total_Label.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Grand_Total_Label.configure(foreground="#000000")
        self.Grand_Total_Label.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Label.configure(highlightcolor="black")
        self.Grand_Total_Label.configure(text='''Grand Total''')

        self.Add_Button_ = tk.Button(Screening_Camp_Window)
        self.Add_Button_.place(relx=0.658, rely=0.311, relwidth=0.078, relheight=0.06)
        self.Add_Button_.configure(activebackground="#ececec")
        self.Add_Button_.configure(activeforeground="#000000")
        self.Add_Button_.configure(background="#d9d9d9")
        self.Add_Button_.configure(disabledforeground="#a3a3a3")
        self.Add_Button_.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Add_Button_.configure(foreground="#000000")
        self.Add_Button_.configure(highlightbackground="#d9d9d9")
        self.Add_Button_.configure(highlightcolor="black")
        self.Add_Button_.configure(pady="0")
        self.Add_Button_.configure(text='''ADD''', command=self.add_item)

        self.Delete_Button = tk.Button(Screening_Camp_Window)
        self.Delete_Button.place(relx=0.658, rely=0.392, relwidth=0.078, relheight=0.06)
        self.Delete_Button.configure(activebackground="#ececec")
        self.Delete_Button.configure(activeforeground="#000000")
        self.Delete_Button.configure(background="#d9d9d9")
        self.Delete_Button.configure(disabledforeground="#a3a3a3")
        self.Delete_Button.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Delete_Button.configure(foreground="#000000")
        self.Delete_Button.configure(highlightbackground="#d9d9d9")
        self.Delete_Button.configure(highlightcolor="black")
        self.Delete_Button.configure(pady="0")
        self.Delete_Button.configure(text='''DELETE''', command=self.remove_item)

        self.Update_Button = tk.Button(Screening_Camp_Window)
        self.Update_Button.place(relx=0.658, rely=0.474, relwidth=0.078, relheight=0.06)
        self.Update_Button.configure(activebackground="#ececec")
        self.Update_Button.configure(activeforeground="#000000")
        self.Update_Button.configure(background="#d9d9d9")
        self.Update_Button.configure(disabledforeground="#a3a3a3")
        self.Update_Button.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Update_Button.configure(foreground="#000000")
        self.Update_Button.configure(highlightbackground="#d9d9d9")
        self.Update_Button.configure(highlightcolor="black")
        self.Update_Button.configure(pady="0")
        self.Update_Button.configure(text='''UPDATE''', command=self.update_item)

        self.Clear_Button = tk.Button(Screening_Camp_Window)
        self.Clear_Button.place(relx=0.658, rely=0.555, relwidth=0.078, relheight=0.06)
        self.Clear_Button.configure(activebackground="#ececec")
        self.Clear_Button.configure(activeforeground="#000000")
        self.Clear_Button.configure(background="#d9d9d9")
        self.Clear_Button.configure(disabledforeground="#a3a3a3")
        self.Clear_Button.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Clear_Button.configure(foreground="#000000")
        self.Clear_Button.configure(highlightbackground="#d9d9d9")
        self.Clear_Button.configure(highlightcolor="black")
        self.Clear_Button.configure(pady="0")
        self.Clear_Button.configure(text='''CLEAR''', command=self.clear_text)

        self.Select_Image_Button = tk.Button(Screening_Camp_Window)
        self.Select_Image_Button.place(relx=0.747, rely=0.311, relwidth=0.078, relheight=0.06)
        self.Select_Image_Button.configure(activebackground="#ececec")
        self.Select_Image_Button.configure(activeforeground="#000000")
        self.Select_Image_Button.configure(background="#d9d9d9")
        self.Select_Image_Button.configure(disabledforeground="#a3a3a3")
        self.Select_Image_Button.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Select_Image_Button.configure(foreground="#000000")
        self.Select_Image_Button.configure(highlightbackground="#d9d9d9")
        self.Select_Image_Button.configure(highlightcolor="black")
        self.Select_Image_Button.configure(pady="0")
        self.Select_Image_Button.configure(text='''* Select Image''', command=self.openimage)

        self.Selected_Image_Label = tk.Entry(Screening_Camp_Window)
        self.Selected_Image_Label.place(relx=0.83, rely=0.311, relwidth=0.162, relheight=0.05)
        self.Selected_Image_Label.configure(background="#d9d9d9")
        self.Selected_Image_Label.configure(disabledforeground="#a3a3a3")
        self.Selected_Image_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Selected_Image_Label.configure(foreground="#000000")
        self.Selected_Image_Label.configure(highlightbackground="#d9d9d9")
        self.Selected_Image_Label.configure(highlightcolor="black")

        # self.Folder_Name_Label = tk.Label(Screening_Camp_Window)
        # self.Folder_Name_Label.place(relx=0.75, rely=0.392, relwidth=0.078, relheight=0.05)
        # self.Folder_Name_Label.configure(activebackground="#f9f9f9")
        # self.Folder_Name_Label.configure(activeforeground="black")
        # self.Folder_Name_Label.configure(background="#d9d9d9")
        # self.Folder_Name_Label.configure(disabledforeground="#a3a3a3")
        # self.Folder_Name_Label.configure(font="-family {Helvatica} -size 13 -weight normal")
        # self.Folder_Name_Label.configure(foreground="#000000")
        # self.Folder_Name_Label.configure(highlightbackground="#d9d9d9")
        # self.Folder_Name_Label.configure(highlightcolor="black")

        self.Upload_Button = tk.Button(Screening_Camp_Window)
        self.Upload_Button.place(relx=0.80, rely=0.392, relwidth=0.078, relheight=0.06)
        self.Upload_Button.configure(activebackground="#ececec")
        self.Upload_Button.configure(activeforeground="#000000")
        self.Upload_Button.configure(background="#d9d9d9")
        self.Upload_Button.configure(disabledforeground="#a3a3a3")
        self.Upload_Button.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Upload_Button.configure(foreground="#000000")
        self.Upload_Button.configure(highlightbackground="#d9d9d9")
        self.Upload_Button.configure(highlightcolor="black")
        self.Upload_Button.configure(pady="0")
        self.Upload_Button.configure(text='''Save Image''', command=self.saveimage)

        self.Scrolledtreeview1 = ScrolledTreeView(Screening_Camp_Window)
        self.Scrolledtreeview1.place(relx=0.02, rely=0.717, relheight=0.253
                                    , relwidth=0.969)
        self.Scrolledtreeview1.configure(columns=("Date","Id_From", "Id_To", "Place","Address", "Organiser", "Phone_NO", "Incharge", "Phone_no",  "Endodontics", "Periodont", "Orthodontics", "Surgery", "Pedodont", "Oral_Patho",
            "Public_Health", "Oral_Mea", "Prostho", "T/R/S", "Total"))
        # self.Scrolledtreeview1.configure(columns="Col2")
        # self.Scrolledtreeview1.configure(columns="Col3")

        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0", text="S.NO")
        self.Scrolledtreeview1.heading("#0", anchor="center")
        self.Scrolledtreeview1.column("#0", width="50")
        self.Scrolledtreeview1.column("#0", minwidth="20")
        self.Scrolledtreeview1.column("#0", stretch="1")
        self.Scrolledtreeview1.column("#0", anchor="center")

        self.Scrolledtreeview1.heading("Date", text="Date")
        self.Scrolledtreeview1.heading("Date", anchor="center")
        self.Scrolledtreeview1.column("Date", width="100")
        self.Scrolledtreeview1.column("Date", minwidth="20")
        self.Scrolledtreeview1.column("Date", stretch="1")
        self.Scrolledtreeview1.column("Date", anchor="w")

        self.Scrolledtreeview1.heading("Id_From", text="ID From")
        self.Scrolledtreeview1.heading("Id_From", anchor="center")
        self.Scrolledtreeview1.column("Id_From", width="100")
        self.Scrolledtreeview1.column("Id_From", minwidth="20")
        self.Scrolledtreeview1.column("Id_From", stretch="1")
        self.Scrolledtreeview1.column("Id_From", anchor="center")

        self.Scrolledtreeview1.heading("Id_To", text="ID To")
        self.Scrolledtreeview1.heading("Id_To", anchor="center")
        self.Scrolledtreeview1.column("Id_To", width="100")
        self.Scrolledtreeview1.column("Id_To", minwidth="20")
        self.Scrolledtreeview1.column("Id_To", stretch="1")
        self.Scrolledtreeview1.column("Id_To", anchor="center")

        self.Scrolledtreeview1.heading("Place", text="Place")
        self.Scrolledtreeview1.heading("Place", anchor="center")
        self.Scrolledtreeview1.column("Place", width="100")
        self.Scrolledtreeview1.column("Place", minwidth="20")
        self.Scrolledtreeview1.column("Place", stretch="1")
        self.Scrolledtreeview1.column("Place", anchor="center")

        self.Scrolledtreeview1.heading("Address", text="Address")
        self.Scrolledtreeview1.heading("Address", anchor="center")
        self.Scrolledtreeview1.column("Address", width="100")
        self.Scrolledtreeview1.column("Address", minwidth="20")
        self.Scrolledtreeview1.column("Address", stretch="1")
        self.Scrolledtreeview1.column("Address", anchor="center")

        self.Scrolledtreeview1.heading("Organiser", text="Organiser")
        self.Scrolledtreeview1.heading("Organiser", anchor="center")
        self.Scrolledtreeview1.column("Organiser", width="100")
        self.Scrolledtreeview1.column("Organiser", minwidth="20")
        self.Scrolledtreeview1.column("Organiser", stretch="1")
        self.Scrolledtreeview1.column("Organiser", anchor="center")

        self.Scrolledtreeview1.heading("Phone_NO", text="Phone NO")
        self.Scrolledtreeview1.heading("Phone_NO", anchor="center")
        self.Scrolledtreeview1.column("Phone_NO", width="100")
        self.Scrolledtreeview1.column("Phone_NO", minwidth="20")
        self.Scrolledtreeview1.column("Phone_NO", stretch="1")
        self.Scrolledtreeview1.column("Phone_NO", anchor="center")

        self.Scrolledtreeview1.heading("Incharge", text="Incharge")
        self.Scrolledtreeview1.heading("Incharge", anchor="center")
        self.Scrolledtreeview1.column("Incharge", width="100")
        self.Scrolledtreeview1.column("Incharge", minwidth="20")
        self.Scrolledtreeview1.column("Incharge", stretch="1")
        self.Scrolledtreeview1.column("Incharge", anchor="center")

        self.Scrolledtreeview1.heading("Phone_no", text="Phone no")
        self.Scrolledtreeview1.heading("Phone_no", anchor="center")
        self.Scrolledtreeview1.column("Phone_no", width="100")
        self.Scrolledtreeview1.column("Phone_no", minwidth="20")
        self.Scrolledtreeview1.column("Phone_no", stretch="1")
        self.Scrolledtreeview1.column("Phone_no", anchor="center")

        self.Scrolledtreeview1.heading("Endodontics", text="Endodontics")
        self.Scrolledtreeview1.heading("Endodontics", anchor="center")
        self.Scrolledtreeview1.column("Endodontics", width="100")
        self.Scrolledtreeview1.column("Endodontics", minwidth="20")
        self.Scrolledtreeview1.column("Endodontics", stretch="1")
        self.Scrolledtreeview1.column("Endodontics", anchor="center")

        self.Scrolledtreeview1.heading("Periodont", text="Periodont")
        self.Scrolledtreeview1.heading("Periodont", anchor="center")
        self.Scrolledtreeview1.column("Periodont", width="100")
        self.Scrolledtreeview1.column("Periodont", minwidth="20")
        self.Scrolledtreeview1.column("Periodont", stretch="1")
        self.Scrolledtreeview1.column("Periodont", anchor="center")

        self.Scrolledtreeview1.heading("Orthodontics", text="Orthodontics")
        self.Scrolledtreeview1.heading("Orthodontics", anchor="center")
        self.Scrolledtreeview1.column("Orthodontics", width="100")
        self.Scrolledtreeview1.column("Orthodontics", minwidth="20")
        self.Scrolledtreeview1.column("Orthodontics", stretch="1")
        self.Scrolledtreeview1.column("Orthodontics", anchor="center")

        self.Scrolledtreeview1.heading("Surgery", text="Surgery")
        self.Scrolledtreeview1.heading("Surgery", anchor="center")
        self.Scrolledtreeview1.column("Surgery", width="100")
        self.Scrolledtreeview1.column("Surgery", minwidth="20")
        self.Scrolledtreeview1.column("Surgery", stretch="1")
        self.Scrolledtreeview1.column("Surgery", anchor="center")

        self.Scrolledtreeview1.heading("Pedodont", text="Pedodont")
        self.Scrolledtreeview1.heading("Pedodont", anchor="center")
        self.Scrolledtreeview1.column("Pedodont", width="100")
        self.Scrolledtreeview1.column("Pedodont", minwidth="20")
        self.Scrolledtreeview1.column("Pedodont", stretch="1")
        self.Scrolledtreeview1.column("Pedodont", anchor="center")

        self.Scrolledtreeview1.heading("Oral_Patho", text="Oral Patho")
        self.Scrolledtreeview1.heading("Oral_Patho", anchor="center")
        self.Scrolledtreeview1.column("Oral_Patho", width="100")
        self.Scrolledtreeview1.column("Oral_Patho", minwidth="20")
        self.Scrolledtreeview1.column("Oral_Patho", stretch="1")
        self.Scrolledtreeview1.column("Oral_Patho", anchor="center")

        self.Scrolledtreeview1.heading("Public_Health", text="Public Health")
        self.Scrolledtreeview1.heading("Public_Health", anchor="center")
        self.Scrolledtreeview1.column("Public_Health", width="100")
        self.Scrolledtreeview1.column("Public_Health", minwidth="20")
        self.Scrolledtreeview1.column("Public_Health", stretch="1")
        self.Scrolledtreeview1.column("Public_Health", anchor="center")

        self.Scrolledtreeview1.heading("Oral_Mea", text="Oral Mea")
        self.Scrolledtreeview1.heading("Oral_Mea", anchor="center")
        self.Scrolledtreeview1.column("Oral_Mea", width="100")
        self.Scrolledtreeview1.column("Oral_Mea", minwidth="20")
        self.Scrolledtreeview1.column("Oral_Mea", stretch="1")
        self.Scrolledtreeview1.column("Oral_Mea", anchor="center")

        self.Scrolledtreeview1.heading("Prostho", text="Prostho")
        self.Scrolledtreeview1.heading("Prostho", anchor="center")
        self.Scrolledtreeview1.column("Prostho", width="100")
        self.Scrolledtreeview1.column("Prostho", minwidth="20")
        self.Scrolledtreeview1.column("Prostho", stretch="1")
        self.Scrolledtreeview1.column("Prostho", anchor="center")

        self.Scrolledtreeview1.heading("T/R/S", text="T/R/S")
        self.Scrolledtreeview1.heading("T/R/S", anchor="center")
        self.Scrolledtreeview1.column("T/R/S", width="100")
        self.Scrolledtreeview1.column("T/R/S", minwidth="20")
        self.Scrolledtreeview1.column("T/R/S", stretch="1")
        self.Scrolledtreeview1.column("T/R/S", anchor="center")

        self.Scrolledtreeview1.heading("Total", text="Total")
        self.Scrolledtreeview1.heading("Total", anchor="center")
        self.Scrolledtreeview1.column("Total", width="100")
        self.Scrolledtreeview1.column("Total", minwidth="20")
        self.Scrolledtreeview1.column("Total", stretch="1")
        self.Scrolledtreeview1.column("Total", anchor="center")

        # self.Scrolledlistbox1 = ScrolledListBox(Screening_Camp_Window)
        # self.Scrolledlistbox1.place(relx=0.02, rely=0.717, relheight=0.253
        #                             , relwidth=0.969)
        # self.Scrolledlistbox1.configure(background="white")
        # self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        # self.Scrolledlistbox1.configure(font=font10)
        # self.Scrolledlistbox1.configure(foreground="black")
        # self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        # self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        # self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        # self.Scrolledlistbox1.configure(selectforeground="black")

        self.tr_radio = tk.IntVar(None, 1)
        self.Screened_Radio = tk.Radiobutton(Screening_Camp_Window)
        self.Screened_Radio.place(relx=0.013, rely=0.257, relheight=0.042
                                  , relwidth=0.18)
        self.Screened_Radio.configure(activebackground="#ececec")
        self.Screened_Radio.configure(activeforeground="#000000")
        self.Screened_Radio.configure(background="#d9d9d9")
        self.Screened_Radio.configure(disabledforeground="#a3a3a3")
        self.Screened_Radio.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Screened_Radio.configure(foreground="#000000")
        self.Screened_Radio.configure(highlightbackground="#d9d9d9")
        self.Screened_Radio.configure(highlightcolor="black")
        self.Screened_Radio.configure(justify='left')
        self.Screened_Radio.configure(text='''Screened''')
        self.Screened_Radio.configure(value=1)
        self.Screened_Radio.configure(variable=self.tr_radio)

        self.Treated_Radio = tk.Radiobutton(Screening_Camp_Window)
        self.Treated_Radio.place(relx=0.208, rely=0.257, relheight=0.042
                                 , relwidth=0.18)
        self.Treated_Radio.configure(activebackground="#ececec")
        self.Treated_Radio.configure(activeforeground="#000000")
        self.Treated_Radio.configure(background="#d9d9d9")
        self.Treated_Radio.configure(disabledforeground="#a3a3a3")
        self.Treated_Radio.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Treated_Radio.configure(foreground="#000000")
        self.Treated_Radio.configure(highlightbackground="#d9d9d9")
        self.Treated_Radio.configure(highlightcolor="black")
        self.Treated_Radio.configure(justify='left')
        self.Treated_Radio.configure(text='''Treated''')
        self.Treated_Radio.configure(value=2)
        self.Treated_Radio.configure(variable=self.tr_radio)

        self.Reffered_Radio = tk.Radiobutton(Screening_Camp_Window)
        self.Reffered_Radio.place(relx=0.408, rely=0.257, relheight=0.042
                                 , relwidth=0.18)
        self.Reffered_Radio.configure(activebackground="#ececec")
        self.Reffered_Radio.configure(activeforeground="#000000")
        self.Reffered_Radio.configure(background="#d9d9d9")
        self.Reffered_Radio.configure(disabledforeground="#a3a3a3")
        self.Reffered_Radio.configure(font="-family {Helvatica} -size 13 -weight normal")
        self.Reffered_Radio.configure(foreground="#000000")
        self.Reffered_Radio.configure(highlightbackground="#d9d9d9")
        self.Reffered_Radio.configure(highlightcolor="black")
        self.Reffered_Radio.configure(justify='left')
        self.Reffered_Radio.configure(text='''Reffered''')
        self.Reffered_Radio.configure(value=3)
        self.Reffered_Radio.configure(variable=self.tr_radio)
        
        self.populate_list()

    
    # Returns the list of all the entries in the window
    def get_entry_object(self):
        entries = [
            self.Date_Entry,
            self.From_Entry,
            self.To_Entry,
            self.Place_Entry,
            self.Address_Entry,
            self.Organiser_Entry,
            self.OPhone_Entry,
            self.Incharge_Entry,
            self.IPhone_Entry,
            self.Endodontics_Entry,
            self.Periodont_Entry,
            self.Orthodontics_Entry,
            self.Surgery_Entry,
            self.Pedodont_Entry,
            self.Oralpatho_Entry,
            self.Public_Health_Entry,
            self.Oral_Mea_Entry,
            self.Prostho_Entry,
            self.tr_radio,
            self.Grand_Total_Entry
        ]
        return entries
    
    # Adds a row to the database' respective table by getting inputs from entries
    def add_item(self):
        if (self.Date_Entry.get()=='' or self.Place_Entry.get()=='' or self.Address_Entry.get()=='' or self.Organiser_Entry.get()=='' or self.OPhone_Entry.get()=='' or self.Incharge_Entry.get()=='' or self.IPhone_Entry.get()=='' or self.From_Entry.get()=='' or self.To_Entry.get()=='' or len(self.a)== 0):
            tk.messagebox.showerror("ERROR!","Please Fill All (*) Fields")
        else:
            # Getting the values entered in each Entry box objects
            entries = self.get_entry_object()
            for i in range(0,len(entries)):
                entries[i] = entries[i].get()
            self.data.insert("screen", entries)
            self.clear_text()
            self.populate_list()
            print("1 row added")
        self.a = []

    # Clears all the data entered in the entries
    def clear_text(self):
        entries = self.get_entry_object()
        for i in range(0,len(entries)):
            try:
                if i != 0:
                    entries[i].delete(0, tk.END)
            except AttributeError:
                pass
        self.Selected_Image_Label.delete(0, tk.END)
    
    # Returns the item selected in the listbox
    def select_item(self):
        # index = self.Scrolledlistbox1.curselection()[0]
        # selected_item = self.Scrolledlistbox1.get(index)
        # return selected_item

        index = self.Scrolledtreeview1.focus()
        selected_item = self.Scrolledtreeview1.item(index)
        return selected_item

    # Removes the item selected in the listbox
    def remove_item(self):
        # selected = self.select_item()
        # self.data.remove("screen", selected[0])
        # self.populate_list()
        # print("Selected Item deleted")

        selected = self.select_item()
        new_values = selected["values"]
        # print(new_values)
        self.data.remove("screen", new_values[0], new_values[1])
        self.populate_list()
        print("Selected Item deleted")

    # Updates the item selected in list box with the values entered in Entry boxes
    def update_item(self):
        selected = self.select_item()
        values = self.get_entry_object()
        selected1 = selected["values"]
        new_values = [selected1[0], selected1[1]]
        for i in range(2, len(values)):
            if values[i].get() == '':
                new_values.append(selected1[i])
                # print(selected[i])
            else:
                new_values.append(values[i].get())
        # print(new_values)
        self.data.update("screen", new_values)
        self.clear_text()
        self.populate_list()
        print("Selected Item Updated")

    # Updates the list box with the current content of the table
    def populate_list(self):
        # self.Scrolledlistbox1.delete(0,tk.END)
        # for row in self.data.fetch("screen"):
        #     self.Scrolledlistbox1.insert(tk.END,row)
        # self.count = self.data.get_count("screen")

        i = 1
        # self.Scrolledtreeview1.delete(0, tk.END)
        self.Scrolledtreeview1.delete(*self.Scrolledtreeview1.get_children())
        for row in self.data.fetch("screen"):
            self.Scrolledtreeview1.insert("", 'end', text=i, value=row)
            i = i + 1
        self.count = self.data.get_count("screen")

    # def upload_image(self):
    #     try:
    #         upload_image_window.create_Upload_Image_Window(rt)
    #     except:
    #         upload_image_window.create_Upload_Image_Window(root)

    a = []

    def ensure_dir(self, file_path):
        if not os.path.exists(file_path):
            os.makedirs(file_path)

    def openimage(self):
        filez = filedialog.askopenfilename(multiple=True, initialdir="D:", title="choose your file",
                                           filetypes=(("jpeg files", "*.jpg"), ("all files", "*.*")))
        # print(filez)
        # prglobal a=[]int(filez)
        # print(filez)
        for i in filez:
            # z = i.replace("/","\")
            self.a.append(i)
        # print(self.a)
        # n=len(a)
        # return a
        # img = Image.open(filename)#img.save()
        self.Selected_Image_Label.delete(0, tk.END)
        self.Selected_Image_Label.insert(0, self.a)

    def saveimage(self):

        pathimage = self.Date_Entry.get()
        systempath = os.getcwd()
        newpath = systempath + "/" + "images/" + pathimage
        self.ensure_dir(newpath)
        for j in self.a:
            base = os.path.basename(j)
            base4 = base[:-4]
            #   dest=newpath+"/"+base
            #   print(dest)
            #   os.rename(j,dest)

            file = open(newpath + "\\" + base4 + "-Copy.png", "wb")
            with open(j, "rb") as f:
                while True:
                    byte = f.read(1)
                    if not byte:
                        break
                    file.write(byte)

        #   Image2 = Image.open(j)
        #   Image2copy = Image2.copy()
        #   Image2.save(dest)

        # fp=open(j,"wb")
        # j="r"+"\""+j+"\""
        # print(j)
        # self.fp=open(j,"wb")
        # print(j)
        # self.img =Image.open(j)
        # self.im = numpy.array(self.img)
        # self.fft_mag = numpy.abs(numpy.fft.fftshift(numpy.fft.fft2(self.im)))

        # self.visual = numpy.log(self.fft_mag)
        # self.visual = (self.visual - self.visual.min()) / (self.visual.max() - self.visual.min())

        # self.result = Image.fromarray((self.visual * 255).astype(numpy.uint8))
        # self.img.save(newpath)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

# # The following code is added to facilitate the Scrolled widgets you specified.
# class AutoScroll(object):
#     '''Configure the scrollbars for a widget.'''
#
#     def __init__(self, master):
#         #  Rozen. Added the try-except clauses so that this class
#         #  could be used for scrolled entry widget for which vertical
#         #  scrolling is not supported. 5/7/14.
#         try:
#             vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
#         except:
#             pass
#         hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
#
#         # self.configure(yscrollcommand=_autoscroll(vsb),
#         #    xscrollcommand=_autoscroll(hsb))
#         try:
#             self.configure(yscrollcommand=self._autoscroll(vsb))
#         except:
#             pass
#         self.configure(xscrollcommand=self._autoscroll(hsb))
#
#         self.grid(column=0, row=0, sticky='nsew')
#         try:
#             vsb.grid(column=1, row=0, sticky='ns')
#         except:
#             pass
#         hsb.grid(column=0, row=1, sticky='ew')
#
#         master.grid_columnconfigure(0, weight=1)
#         master.grid_rowconfigure(0, weight=1)
#
#         # Copy geometry methods of master  (taken from ScrolledText.py)
#         if py3:
#             methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
#                       | tk.Place.__dict__.keys()
#         else:
#             methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
#                       + tk.Place.__dict__.keys()
#
#         for meth in methods:
#             if meth[0] != '_' and meth not in ('config', 'configure'):
#                 setattr(self, meth, getattr(master, meth))
#
#     @staticmethod
#     def _autoscroll(sbar):
#         '''Hide and show scrollbar as needed.'''
#
#         def wrapped(first, last):
#             first, last = float(first), float(last)
#             if first <= 0 and last >= 1:
#                 sbar.grid_remove()
#             else:
#                 sbar.grid()
#             sbar.set(first, last)
#
#         return wrapped
#
#     def __str__(self):
#         return str(self.master)
#
# def _create_container(func):
#     '''Creates a ttk Frame with a given master, and use this new frame to
#     place the scrollbars and the widget.'''
#
#     def wrapped(cls, master, **kw):
#         container = ttk.Frame(master)
#         container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
#         container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
#         return func(cls, container, **kw)
#
#     return wrapped
#
# class ScrolledListBox(AutoScroll, tk.Listbox):
#     '''A standard Tkinter Listbox widget with scrollbars that will
#     automatically show/hide as needed.'''
#
#     @_create_container
#     def __init__(self, master, **kw):
#         tk.Listbox.__init__(self, master, **kw)
#         AutoScroll.__init__(self, master)
#
#     def size_(self):
#         sz = tk.Listbox.size(self)
#         return sz
#
# import platform
# def _bound_to_mousewheel(event, widget):
#     child = widget.winfo_children()[0]
#     if platform.system() == 'Windows' or platform.system() == 'Darwin':
#         child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
#         child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
#     else:
#         child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
#         child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
#         child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
#         child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))
#
# def _unbound_to_mousewheel(event, widget):
#     if platform.system() == 'Windows' or platform.system() == 'Darwin':
#         widget.unbind_all('<MouseWheel>')
#         widget.unbind_all('<Shift-MouseWheel>')
#     else:
#         widget.unbind_all('<Button-4>')
#         widget.unbind_all('<Button-5>')
#         widget.unbind_all('<Shift-Button-4>')
#         widget.unbind_all('<Shift-Button-5>')
#
# def _on_mousewheel(event, widget):
#     if platform.system() == 'Windows':
#         widget.yview_scroll(-1 * int(event.delta / 120), 'units')
#     elif platform.system() == 'Darwin':
#         widget.yview_scroll(-1 * int(event.delta), 'units')
#     else:
#         if event.num == 4:
#             widget.yview_scroll(-1, 'units')
#         elif event.num == 5:
#             widget.yview_scroll(1, 'units')
#
# def _on_shiftmouse(event, widget):
#     if platform.system() == 'Windows':
#         widget.xview_scroll(-1 * int(event.delta / 120), 'units')
#     elif platform.system() == 'Darwin':
#         widget.xview_scroll(-1 * int(event.delta), 'units')
#     else:
#         if event.num == 4:
#             widget.xview_scroll(-1, 'units')
#         elif event.num == 5:
#             widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()





