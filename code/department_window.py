#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Feb 23, 2020 11:27:03 AM IST  platform: Windows NT

import sys
import datetime
from tkcalendar import DateEntry

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import department_window_support
from db import Database

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    department_window_support.set_Tk_var()
    top = Department_Outpatient(root)
    department_window_support.init(root, top)
    root.mainloop()

w = None
def create_Department_Outpatient(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    department_window_support.set_Tk_var()
    top = Department_Outpatient (w)
    department_window_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Department_Outpatient():
    global w
    w.destroy()
    w = None

class Department_Outpatient:
    def __init__(self, Department_Window=None):
        '''This class configures and populates the toplevel window.
           Department_Window is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Helvetica} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {Helvetica} -size 13 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        self.data = Database("dental.db")
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        Department_Window.geometry("1491x739+35+31")
        Department_Window.minsize(148, 1)
        Department_Window.maxsize(4112, 1030)
        Department_Window.resizable(1, 1)
        Department_Window.title("DEPARTMENT OUT-PATIENT")
        Department_Window.configure(background="#40b3a3")
        Department_Window.configure(highlightbackground="#d9d9d9")
        Department_Window.configure(highlightcolor="black")

        self.menubar = tk.Menu(Department_Window, font=font9, bg=_bgcolor, fg=_fgcolor)
        Department_Window.configure(menu = self.menubar)

        self.File = tk.Menu(Department_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.File,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
                                 foreground="#000000",
                                 label="File")
        self.File.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
                foreground="#000000",
                label="Exit",
                command=department_window_support.destroy_window)

        self.Department_Label = tk.Label(Department_Window)
        self.Department_Label.place(relx=0.241, rely=0.027, relwidth = 0.518, relheight= 0.084)

        self.Department_Label.configure(activebackground="#f9f9f9")
        self.Department_Label.configure(activeforeground="black")
        self.Department_Label.configure(background="#d9d9d9")
        self.Department_Label.configure(disabledforeground="#a3a3a3")
        self.Department_Label.configure(font="-family {Helvetica} -size 18 -weight normal")
        self.Department_Label.configure(foreground="#000000")
        self.Department_Label.configure(highlightbackground="#d9d9d9")
        self.Department_Label.configure(highlightcolor="black")
        self.Department_Label.configure(relief="raised")
        self.Department_Label.configure(text='''Department Out Patient''')

        self.on_radio = tk.IntVar(None, 1)
        self.Old_Patient_Radio = tk.Radiobutton(Department_Window)
        self.Old_Patient_Radio.place(relx=0.013, rely=0.124, relheight=0.042, relwidth=0.18)
        self.Old_Patient_Radio.configure(activebackground="#ececec")
        self.Old_Patient_Radio.configure(activeforeground="#000000")
        self.Old_Patient_Radio.configure(background="#d9d9d9")
        self.Old_Patient_Radio.configure(disabledforeground="#a3a3a3")
        self.Old_Patient_Radio.configure(font=font11)
        self.Old_Patient_Radio.configure(foreground="#000000")
        self.Old_Patient_Radio.configure(highlightbackground="#d9d9d9")
        self.Old_Patient_Radio.configure(highlightcolor="black")
        self.Old_Patient_Radio.configure(justify='left')
        self.Old_Patient_Radio.configure(text='''Old Patient''')
        self.Old_Patient_Radio.configure(value=1)
        self.Old_Patient_Radio.configure(variable=self.on_radio)

        self.New_Patient_Radio = tk.Radiobutton(Department_Window)
        self.New_Patient_Radio.place(relx=0.213, rely=0.124, relheight=0.042, relwidth=0.18)
        self.New_Patient_Radio.configure(activebackground="#ececec")
        self.New_Patient_Radio.configure(activeforeground="#000000")
        self.New_Patient_Radio.configure(background="#d9d9d9")
        self.New_Patient_Radio.configure(disabledforeground="#a3a3a3")
        self.New_Patient_Radio.configure(font=font11)
        self.New_Patient_Radio.configure(foreground="#000000")
        self.New_Patient_Radio.configure(highlightbackground="#d9d9d9")
        self.New_Patient_Radio.configure(highlightcolor="black")
        self.New_Patient_Radio.configure(justify='left')
        self.New_Patient_Radio.configure(text='''New Patient''')
        self.New_Patient_Radio.configure(value=2)
        self.New_Patient_Radio.configure(variable=self.on_radio)

        self.Health_Label = tk.Label(Department_Window)
        self.Health_Label.place(relx=0.410, rely=0.124, relwidth=0.169, relheight=0.05)
        self.Health_Label.configure(activebackground="#f9f9f9")
        self.Health_Label.configure(activeforeground="black")
        self.Health_Label.configure(background="#d9d9d9")
        self.Health_Label.configure(disabledforeground="#a3a3a3")
        self.Health_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Health_Label.configure(foreground="#000000")
        self.Health_Label.configure(highlightbackground="#d9d9d9")
        self.Health_Label.configure(highlightcolor="black")
        self.Health_Label.configure(text='''Health Education''')

        self.Health_Entry = tk.Entry(Department_Window)
        self.Health_Entry.place(relx=0.599, rely=0.124, relheight=0.048
                                   , relwidth=0.137)
        self.Health_Entry.configure(background="white")
        self.Health_Entry.configure(disabledforeground="#a3a3a3")
        self.Health_Entry.configure(font="-family {Helvetica} -size 10")
        self.Health_Entry.configure(foreground="#000000")
        self.Health_Entry.configure(highlightbackground="#d9d9d9")
        self.Health_Entry.configure(highlightcolor="black")
        self.Health_Entry.configure(insertbackground="black")
        self.Health_Entry.configure(selectbackground="#c4c4c4")
        self.Health_Entry.configure(selectforeground="black")

        self.Incharge_Label = tk.Label(Department_Window)
        self.Incharge_Label.place(relx=0.013, rely=0.189, relwidth = 0.169, relheight= 0.05)
        self.Incharge_Label.configure(activebackground="#f9f9f9")
        self.Incharge_Label.configure(activeforeground="black")
        self.Incharge_Label.configure(background="#d9d9d9")
        self.Incharge_Label.configure(disabledforeground="#a3a3a3")
        self.Incharge_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Incharge_Label.configure(foreground="#000000")
        self.Incharge_Label.configure(highlightbackground="#d9d9d9")
        self.Incharge_Label.configure(highlightcolor="black")
        self.Incharge_Label.configure(text='''Incharge''')

        self.Incharge_Entry = tk.Entry(Department_Window)
        self.Incharge_Entry.place(relx=0.188, rely=0.189, relheight=0.048
                , relwidth=0.137)
        self.Incharge_Entry.configure(background="white")
        self.Incharge_Entry.configure(disabledforeground="#a3a3a3")
        self.Incharge_Entry.configure(font="-family {Helvetica} -size 10")
        self.Incharge_Entry.configure(foreground="#000000")
        self.Incharge_Entry.configure(highlightbackground="#d9d9d9")
        self.Incharge_Entry.configure(highlightcolor="black")
        self.Incharge_Entry.configure(insertbackground="black")
        self.Incharge_Entry.configure(selectbackground="#c4c4c4")
        self.Incharge_Entry.configure(selectforeground="black")

        self.Phone_Label = tk.Label(Department_Window)
        self.Phone_Label.place(relx=0.335, rely=0.189, relwidth = 0.162, relheight= 0.05)
        self.Phone_Label.configure(activebackground="#f9f9f9")
        self.Phone_Label.configure(activeforeground="black")
        self.Phone_Label.configure(background="#d9d9d9")
        self.Phone_Label.configure(disabledforeground="#a3a3a3")
        self.Phone_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Phone_Label.configure(foreground="#000000")
        self.Phone_Label.configure(highlightbackground="#d9d9d9")
        self.Phone_Label.configure(highlightcolor="black")
        self.Phone_Label.configure(text='''Phone''')

        self.Phone_Entry = tk.Entry(Department_Window)
        self.Phone_Entry.place(relx=0.51, rely=0.189, relheight= 0.048, relwidth=0.137)
        self.Phone_Entry.configure(background="white")
        self.Phone_Entry.configure(disabledforeground="#a3a3a3")
        self.Phone_Entry.configure(font="-family {Helvetica} -size 10")
        self.Phone_Entry.configure(foreground="#000000")
        self.Phone_Entry.configure(highlightbackground="#d9d9d9")
        self.Phone_Entry.configure(highlightcolor="black")
        self.Phone_Entry.configure(insertbackground="black")
        self.Phone_Entry.configure(selectbackground="#c4c4c4")
        self.Phone_Entry.configure(selectforeground="black")

        self.Date_Label = tk.Label(Department_Window)
        self.Date_Label.place(relx=0.664, rely=0.189, relwidth = 0.122, relheight= 0.05)
        self.Date_Label.configure(activebackground="#f9f9f9")
        self.Date_Label.configure(activeforeground="black")
        self.Date_Label.configure(background="#d9d9d9")
        self.Date_Label.configure(disabledforeground="#a3a3a3")
        self.Date_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Date_Label.configure(foreground="#000000")
        self.Date_Label.configure(highlightbackground="#d9d9d9")
        self.Date_Label.configure(highlightcolor="black")
        self.Date_Label.configure(text='''Date\nYYYY-MM-DD''')

        now = datetime.datetime.now()
        self.Date_Entry = DateEntry(Department_Window, year=now.year, month=now.month, day=now.day)
        self.Date_Entry.place(relx=0.791, rely=0.189,relheight = 0.048, relwidth=0.137)
        self.Date_Entry.configure(background="white")
        self.Date_Entry.configure(date_pattern='y/mm/dd')
        self.Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.Date_Entry.configure(foreground="#000000")
        self.Date_Entry.configure(borderwidth=2)
        self.Date_Entry.configure(width=12)

        # self.Date_Entry = tk.Entry(Department_Window)
        # self.Date_Entry.place(relx=0.791, rely=0.189,relheight = 0.048, relwidth=0.137)
        # self.Date_Entry.configure(background="white")
        # self.Date_Entry.configure(disabledforeground="#a3a3a3")
        # self.Date_Entry.configure(font="-family {Helvetica} -size 10")
        # self.Date_Entry.configure(foreground="#000000")
        # self.Date_Entry.configure(highlightbackground="#d9d9d9")
        # self.Date_Entry.configure(highlightcolor="black")
        # self.Date_Entry.configure(insertbackground="black")
        # self.Date_Entry.configure(selectbackground="#c4c4c4")
        # self.Date_Entry.configure(selectforeground="black")

        self.From_Label = tk.Label(Department_Window)
        self.From_Label.place(relx=0.013, rely=0.311, relwidth = 0.162, relheight= 0.05)
        self.From_Label.configure(activebackground="#f9f9f9")
        self.From_Label.configure(activeforeground="black")
        self.From_Label.configure(background="#d9d9d9")
        self.From_Label.configure(disabledforeground="#a3a3a3")
        self.From_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.From_Label.configure(foreground="#000000")
        self.From_Label.configure(highlightbackground="#d9d9d9")
        self.From_Label.configure(highlightcolor="black")
        self.From_Label.configure(text='''ID From''')

        self.From_Entry = tk.Entry(Department_Window)
        self.From_Entry.place(relx=0.188, rely=0.311,relwidth = 0.137, relheight= 0.048)
        self.From_Entry.configure(background="white")
        self.From_Entry.configure(disabledforeground="#a3a3a3")
        self.From_Entry.configure(font="-family {Helvetica} -size 10")
        self.From_Entry.configure(foreground="#000000")
        self.From_Entry.configure(highlightbackground="#d9d9d9")
        self.From_Entry.configure(highlightcolor="black")
        self.From_Entry.configure(insertbackground="black")
        self.From_Entry.configure(selectbackground="#c4c4c4")
        self.From_Entry.configure(selectforeground="black")

        self.To_Label = tk.Label(Department_Window)
        self.To_Label.place(relx=0.335, rely=0.311, relwidth = 0.162, relheight= 0.05)
        self.To_Label.configure(activebackground="#f9f9f9")
        self.To_Label.configure(activeforeground="black")
        self.To_Label.configure(background="#d9d9d9")
        self.To_Label.configure(disabledforeground="#a3a3a3")
        self.To_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.To_Label.configure(foreground="#000000")
        self.To_Label.configure(highlightbackground="#d9d9d9")
        self.To_Label.configure(highlightcolor="black")
        self.To_Label.configure(text='''ID To''')

        self.To_Entry = tk.Entry(Department_Window)
        self.To_Entry.place(relx=0.51, rely=0.311, relwidth = 0.137, relheight= 0.048)
        self.To_Entry.configure(background="white")
        self.To_Entry.configure(disabledforeground="#a3a3a3")
        self.To_Entry.configure(font="-family {Helvetica} -size 10")
        self.To_Entry.configure(foreground="#000000")
        self.To_Entry.configure(highlightbackground="#d9d9d9")
        self.To_Entry.configure(highlightcolor="black")
        self.To_Entry.configure(insertbackground="black")
        self.To_Entry.configure(selectbackground="#c4c4c4")
        self.To_Entry.configure(selectforeground="black")

        self.Endodontics_Label = tk.Label(Department_Window)
        self.Endodontics_Label.place(relx=0.013, rely=0.379, relwidth = 0.162, relheight= 0.05)
        self.Endodontics_Label.configure(activebackground="#f9f9f9")
        self.Endodontics_Label.configure(activeforeground="black")
        self.Endodontics_Label.configure(background="#d9d9d9")
        self.Endodontics_Label.configure(disabledforeground="#a3a3a3")
        self.Endodontics_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Endodontics_Label.configure(foreground="#000000")
        self.Endodontics_Label.configure(highlightbackground="#d9d9d9")
        self.Endodontics_Label.configure(highlightcolor="black")
        self.Endodontics_Label.configure(text='''Endodontics''')

        self.Periodont_Label = tk.Label(Department_Window)
        self.Periodont_Label.place(relx=0.013, rely=0.447, relwidth = 0.162, relheight= 0.05)
        self.Periodont_Label.configure(activebackground="#f9f9f9")
        self.Periodont_Label.configure(activeforeground="black")
        self.Periodont_Label.configure(background="#d9d9d9")
        self.Periodont_Label.configure(disabledforeground="#a3a3a3")
        self.Periodont_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Periodont_Label.configure(foreground="#000000")
        self.Periodont_Label.configure(highlightbackground="#d9d9d9")
        self.Periodont_Label.configure(highlightcolor="black")
        self.Periodont_Label.configure(text='''Periodont''')

        self.Orthodontics_Label = tk.Label(Department_Window)
        self.Orthodontics_Label.place(relx=0.013, rely=0.514, relwidth = 0.162, relheight= 0.05)
        self.Orthodontics_Label.configure(activebackground="#f9f9f9")
        self.Orthodontics_Label.configure(activeforeground="black")
        self.Orthodontics_Label.configure(background="#d9d9d9")
        self.Orthodontics_Label.configure(disabledforeground="#a3a3a3")
        self.Orthodontics_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Orthodontics_Label.configure(foreground="#000000")
        self.Orthodontics_Label.configure(highlightbackground="#d9d9d9")
        self.Orthodontics_Label.configure(highlightcolor="black")
        self.Orthodontics_Label.configure(text='''Orthodontics''')

        self.Surgery_Label = tk.Label(Department_Window)
        self.Surgery_Label.place(relx=0.013, rely=0.582,relwidth = 0.162, relheight= 0.05)
        self.Surgery_Label.configure(activebackground="#f9f9f9")
        self.Surgery_Label.configure(activeforeground="black")
        self.Surgery_Label.configure(background="#d9d9d9")
        self.Surgery_Label.configure(disabledforeground="#a3a3a3")
        self.Surgery_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Surgery_Label.configure(foreground="#000000")
        self.Surgery_Label.configure(highlightbackground="#d9d9d9")
        self.Surgery_Label.configure(highlightcolor="black")
        self.Surgery_Label.configure(text='''Surgery''')

        self.Pedodont_Label = tk.Label(Department_Window)
        self.Pedodont_Label.place(relx=0.013, rely=0.65, relwidth = 0.162, relheight= 0.05)
        self.Pedodont_Label.configure(activebackground="#f9f9f9")
        self.Pedodont_Label.configure(activeforeground="black")
        self.Pedodont_Label.configure(background="#d9d9d9")
        self.Pedodont_Label.configure(disabledforeground="#a3a3a3")
        self.Pedodont_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Pedodont_Label.configure(foreground="#000000")
        self.Pedodont_Label.configure(highlightbackground="#d9d9d9")
        self.Pedodont_Label.configure(highlightcolor="black")
        self.Pedodont_Label.configure(text='''Pedodont''')

        self.Oralpatho_Label = tk.Label(Department_Window)
        self.Oralpatho_Label.place(relx=0.335, rely=0.379,relwidth = 0.162, relheight= 0.05)
        self.Oralpatho_Label.configure(activebackground="#f9f9f9")
        self.Oralpatho_Label.configure(activeforeground="black")
        self.Oralpatho_Label.configure(background="#d9d9d9")
        self.Oralpatho_Label.configure(disabledforeground="#a3a3a3")
        self.Oralpatho_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Oralpatho_Label.configure(foreground="#000000")
        self.Oralpatho_Label.configure(highlightbackground="#d9d9d9")
        self.Oralpatho_Label.configure(highlightcolor="black")
        self.Oralpatho_Label.configure(text='''Oralpatho''')

        self.Public_Health_Label = tk.Label(Department_Window)
        self.Public_Health_Label.place(relx=0.335, rely=0.447,relwidth = 0.162, relheight= 0.05)
        self.Public_Health_Label.configure(activebackground="#f9f9f9")
        self.Public_Health_Label.configure(activeforeground="black")
        self.Public_Health_Label.configure(background="#d9d9d9")
        self.Public_Health_Label.configure(disabledforeground="#a3a3a3")
        self.Public_Health_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Public_Health_Label.configure(foreground="#000000")
        self.Public_Health_Label.configure(highlightbackground="#d9d9d9")
        self.Public_Health_Label.configure(highlightcolor="black")
        self.Public_Health_Label.configure(text='''Public Health''')

        self.Oral_Mea_Label = tk.Label(Department_Window)
        self.Oral_Mea_Label.place(relx=0.335, rely=0.514,relwidth = 0.162, relheight= 0.05)
        self.Oral_Mea_Label.configure(activebackground="#f9f9f9")
        self.Oral_Mea_Label.configure(activeforeground="black")
        self.Oral_Mea_Label.configure(background="#d9d9d9")
        self.Oral_Mea_Label.configure(disabledforeground="#a3a3a3")
        self.Oral_Mea_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Oral_Mea_Label.configure(foreground="#000000")
        self.Oral_Mea_Label.configure(highlightbackground="#d9d9d9")
        self.Oral_Mea_Label.configure(highlightcolor="black")
        self.Oral_Mea_Label.configure(text='''Oral mea''')

        self.Ping_Thread_Label = tk.Label(Department_Window)
        self.Ping_Thread_Label.place(relx=0.335, rely=0.582, relwidth = 0.162, relheight= 0.05)
        self.Ping_Thread_Label.configure(activebackground="#f9f9f9")
        self.Ping_Thread_Label.configure(activeforeground="black")
        self.Ping_Thread_Label.configure(background="#d9d9d9")
        self.Ping_Thread_Label.configure(disabledforeground="#a3a3a3")
        self.Ping_Thread_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Ping_Thread_Label.configure(foreground="#000000")
        self.Ping_Thread_Label.configure(highlightbackground="#d9d9d9")
        self.Ping_Thread_Label.configure(highlightcolor="black")
        self.Ping_Thread_Label.configure(text='''Prostho''')

        self.Grand_Total_Label = tk.Label(Department_Window)
        self.Grand_Total_Label.place(relx=0.335, rely=0.65, relwidth = 0.162, relheight= 0.05)

        self.Grand_Total_Label.configure(activebackground="#f9f9f9")
        self.Grand_Total_Label.configure(activeforeground="black")
        self.Grand_Total_Label.configure(background="#d9d9d9")
        self.Grand_Total_Label.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Grand_Total_Label.configure(foreground="#000000")
        self.Grand_Total_Label.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Label.configure(highlightcolor="black")
        self.Grand_Total_Label.configure(text='''Grand Total''')

        #Defining the entries

        self.Endodontics_Entry = tk.Entry(Department_Window)
        self.Endodontics_Entry.place(relx=0.188, rely=0.379,relwidth = 0.137, relheight= 0.048)
        self.Endodontics_Entry.configure(background="white")
        self.Endodontics_Entry.configure(disabledforeground="#a3a3a3")
        self.Endodontics_Entry.configure(font="-family {Helvetica} -size 10")
        self.Endodontics_Entry.configure(foreground="#000000")
        self.Endodontics_Entry.configure(highlightbackground="#d9d9d9")
        self.Endodontics_Entry.configure(highlightcolor="black")
        self.Endodontics_Entry.configure(insertbackground="black")
        self.Endodontics_Entry.configure(selectbackground="#c4c4c4")
        self.Endodontics_Entry.configure(selectforeground="black")

        self.Periodont_Entry = tk.Entry(Department_Window)
        self.Periodont_Entry.place(relx=0.188, rely=0.447,relwidth = 0.137, relheight= 0.048)
        self.Periodont_Entry.configure(background="white")
        self.Periodont_Entry.configure(disabledforeground="#a3a3a3")
        self.Periodont_Entry.configure(font="-family {Helvetica} -size 10")
        self.Periodont_Entry.configure(foreground="#000000")
        self.Periodont_Entry.configure(highlightbackground="#d9d9d9")
        self.Periodont_Entry.configure(highlightcolor="black")
        self.Periodont_Entry.configure(insertbackground="black")
        self.Periodont_Entry.configure(selectbackground="#c4c4c4")
        self.Periodont_Entry.configure(selectforeground="black")

        self.Orthodontics_Entry = tk.Entry(Department_Window)
        self.Orthodontics_Entry.place(relx=0.188, rely=0.514, relwidth = 0.137, relheight= 0.048)
        self.Orthodontics_Entry.configure(background="white")
        self.Orthodontics_Entry.configure(disabledforeground="#a3a3a3")
        self.Orthodontics_Entry.configure(font="-family {Helvetica} -size 10")
        self.Orthodontics_Entry.configure(foreground="#000000")
        self.Orthodontics_Entry.configure(highlightbackground="#d9d9d9")
        self.Orthodontics_Entry.configure(highlightcolor="black")
        self.Orthodontics_Entry.configure(insertbackground="black")
        self.Orthodontics_Entry.configure(selectbackground="#c4c4c4")
        self.Orthodontics_Entry.configure(selectforeground="black")

        self.Surgery_Entry = tk.Entry(Department_Window)
        self.Surgery_Entry.place(relx=0.188, rely=0.582, relwidth = 0.137, relheight= 0.048)
        self.Surgery_Entry.configure(background="white")
        self.Surgery_Entry.configure(disabledforeground="#a3a3a3")
        self.Surgery_Entry.configure(font="-family {Helvetica} -size 10")
        self.Surgery_Entry.configure(foreground="#000000")
        self.Surgery_Entry.configure(highlightbackground="#d9d9d9")
        self.Surgery_Entry.configure(highlightcolor="black")
        self.Surgery_Entry.configure(insertbackground="black")
        self.Surgery_Entry.configure(selectbackground="#c4c4c4")
        self.Surgery_Entry.configure(selectforeground="black")

        self.Pedodont_Entry = tk.Entry(Department_Window)
        self.Pedodont_Entry.place(relx=0.188, rely=0.65,relwidth = 0.137, relheight= 0.048)
        self.Pedodont_Entry.configure(background="white")
        self.Pedodont_Entry.configure(disabledforeground="#a3a3a3")
        self.Pedodont_Entry.configure(font="-family {Helvetica} -size 10")
        self.Pedodont_Entry.configure(foreground="#000000")
        self.Pedodont_Entry.configure(highlightbackground="#d9d9d9")
        self.Pedodont_Entry.configure(highlightcolor="black")
        self.Pedodont_Entry.configure(insertbackground="black")
        self.Pedodont_Entry.configure(selectbackground="#c4c4c4")
        self.Pedodont_Entry.configure(selectforeground="black")

        self.Oralpatho_Entry = tk.Entry(Department_Window)
        self.Oralpatho_Entry.place(relx=0.51, rely=0.379,relwidth = 0.137, relheight= 0.048)
        self.Oralpatho_Entry.configure(background="white")
        self.Oralpatho_Entry.configure(disabledforeground="#a3a3a3")
        self.Oralpatho_Entry.configure(font="-family {Helvetica} -size 10")
        self.Oralpatho_Entry.configure(foreground="#000000")
        self.Oralpatho_Entry.configure(highlightbackground="#d9d9d9")
        self.Oralpatho_Entry.configure(highlightcolor="black")
        self.Oralpatho_Entry.configure(insertbackground="black")
        self.Oralpatho_Entry.configure(selectbackground="#c4c4c4")
        self.Oralpatho_Entry.configure(selectforeground="black")

        self.Public_Health_Entry = tk.Entry(Department_Window)
        self.Public_Health_Entry.place(relx=0.51, rely=0.447,relwidth = 0.137, relheight= 0.048)
        self.Public_Health_Entry.configure(background="white")
        self.Public_Health_Entry.configure(disabledforeground="#a3a3a3")
        self.Public_Health_Entry.configure(font="-family {Helvetica} -size 10")
        self.Public_Health_Entry.configure(foreground="#000000")
        self.Public_Health_Entry.configure(highlightbackground="#d9d9d9")
        self.Public_Health_Entry.configure(highlightcolor="black")
        self.Public_Health_Entry.configure(insertbackground="black")
        self.Public_Health_Entry.configure(selectbackground="#c4c4c4")
        self.Public_Health_Entry.configure(selectforeground="black")

        self.Oral_Mea_Entry = tk.Entry(Department_Window)
        self.Oral_Mea_Entry.place(relx=0.51, rely=0.514,relwidth = 0.137, relheight= 0.048)
        self.Oral_Mea_Entry.configure(background="white")
        self.Oral_Mea_Entry.configure(disabledforeground="#a3a3a3")
        self.Oral_Mea_Entry.configure(font="-family {Helvetica} -size 10")
        self.Oral_Mea_Entry.configure(foreground="#000000")
        self.Oral_Mea_Entry.configure(highlightbackground="#d9d9d9")
        self.Oral_Mea_Entry.configure(highlightcolor="black")
        self.Oral_Mea_Entry.configure(insertbackground="black")
        self.Oral_Mea_Entry.configure(selectbackground="#c4c4c4")
        self.Oral_Mea_Entry.configure(selectforeground="black")

        self.Ping_Thread_Entry = tk.Entry(Department_Window)
        self.Ping_Thread_Entry.place(relx=0.51, rely=0.582,relwidth = 0.137, relheight= 0.048)
        self.Ping_Thread_Entry.configure(background="white")
        self.Ping_Thread_Entry.configure(disabledforeground="#a3a3a3")
        self.Ping_Thread_Entry.configure(font="-family {Helvetica} -size 10")
        self.Ping_Thread_Entry.configure(foreground="#000000")
        self.Ping_Thread_Entry.configure(highlightbackground="#d9d9d9")
        self.Ping_Thread_Entry.configure(highlightcolor="black")
        self.Ping_Thread_Entry.configure(insertbackground="black")
        self.Ping_Thread_Entry.configure(selectbackground="#c4c4c4")
        self.Ping_Thread_Entry.configure(selectforeground="black")

        self.Grand_Total_Entry = tk.Entry(Department_Window)
        self.Grand_Total_Entry.place(relx=0.51, rely=0.65, relwidth = 0.137, relheight= 0.048)
        self.Grand_Total_Entry.configure(background="white")
        self.Grand_Total_Entry.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Entry.configure(font="-family {Helvetica} -size 10")
        self.Grand_Total_Entry.configure(foreground="#000000")
        self.Grand_Total_Entry.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Entry.configure(highlightcolor="black")
        self.Grand_Total_Entry.configure(insertbackground="black")
        self.Grand_Total_Entry.configure(selectbackground="#c4c4c4")
        self.Grand_Total_Entry.configure(selectforeground="black")

        self.Add_Button_ = tk.Button(Department_Window)
        self.Add_Button_.place(relx=0.798, rely=0.311, relwidth = 0.078, relheight= 0.06)
        self.Add_Button_.configure(activebackground="#ececec")
        self.Add_Button_.configure(activeforeground="#000000")
        self.Add_Button_.configure(background="#d9d9d9")
        self.Add_Button_.configure(disabledforeground="#a3a3a3")
        self.Add_Button_.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Add_Button_.configure(foreground="#000000")
        self.Add_Button_.configure(highlightbackground="#d9d9d9")
        self.Add_Button_.configure(highlightcolor="black")
        self.Add_Button_.configure(pady="0")
        self.Add_Button_.configure(text='''ADD''', command=self.add_item)

        self.Delete_Button = tk.Button(Department_Window)
        self.Delete_Button.place(relx=0.798, rely=0.392, relwidth = 0.078, relheight= 0.06)
        self.Delete_Button.configure(activebackground="#ececec")
        self.Delete_Button.configure(activeforeground="#000000")
        self.Delete_Button.configure(background="#d9d9d9")
        self.Delete_Button.configure(disabledforeground="#a3a3a3")
        self.Delete_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Delete_Button.configure(foreground="#000000")
        self.Delete_Button.configure(highlightbackground="#d9d9d9")
        self.Delete_Button.configure(highlightcolor="black")
        self.Delete_Button.configure(pady="0")
        self.Delete_Button.configure(text='''DELETE''', command=self.remove_item)

        self.Update_Button = tk.Button(Department_Window)
        self.Update_Button.place(relx=0.798, rely=0.474,  relwidth = 0.078, relheight= 0.06)
        self.Update_Button.configure(activebackground="#ececec")
        self.Update_Button.configure(activeforeground="#000000")
        self.Update_Button.configure(background="#d9d9d9")
        self.Update_Button.configure(disabledforeground="#a3a3a3")
        self.Update_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Update_Button.configure(foreground="#000000")
        self.Update_Button.configure(highlightbackground="#d9d9d9")
        self.Update_Button.configure(highlightcolor="black")
        self.Update_Button.configure(pady="0")
        self.Update_Button.configure(text='''UPDATE''', command=self.update_item)

        self.Clear_Button = tk.Button(Department_Window)
        self.Clear_Button.place(relx=0.798, rely=0.555, relwidth = 0.078, relheight= 0.06)
        self.Clear_Button.configure(activebackground="#ececec")
        self.Clear_Button.configure(activeforeground="#000000")
        self.Clear_Button.configure(background="#d9d9d9")
        self.Clear_Button.configure(disabledforeground="#a3a3a3")
        self.Clear_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Clear_Button.configure(foreground="#000000")
        self.Clear_Button.configure(highlightbackground="#d9d9d9")
        self.Clear_Button.configure(highlightcolor="black")
        self.Clear_Button.configure(pady="0")
        self.Clear_Button.configure(text='''CLEAR''', command=self.clear_text)

        self.Scrolledlistbox3 = ScrolledListBox(Department_Window)
        self.Scrolledlistbox3.place(relx=0.02, rely=0.717, relheight=0.253
                , relwidth=0.969)
        self.Scrolledlistbox3.configure(background="white")
        self.Scrolledlistbox3.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox3.configure(font=font10)
        self.Scrolledlistbox3.configure(foreground="black")
        self.Scrolledlistbox3.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox3.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox3.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox3.configure(selectforeground="black")

        self.tr_radio = tk.IntVar(None, 1)
        self.Treated_Radio = tk.Radiobutton(Department_Window)
        self.Treated_Radio.place(relx=0.013, rely=0.257, relheight=0.042
                , relwidth=0.18)
        self.Treated_Radio.configure(activebackground="#ececec")
        self.Treated_Radio.configure(activeforeground="#000000")
        self.Treated_Radio.configure(background="#d9d9d9")
        self.Treated_Radio.configure(disabledforeground="#a3a3a3")
        self.Treated_Radio.configure(font=font11)
        self.Treated_Radio.configure(foreground="#000000")
        self.Treated_Radio.configure(highlightbackground="#d9d9d9")
        self.Treated_Radio.configure(highlightcolor="black")
        self.Treated_Radio.configure(justify='left')
        self.Treated_Radio.configure(text='''Treated''')
        self.Treated_Radio.configure(value=1)
        self.Treated_Radio.configure(variable=self.tr_radio)

        self.Reffered_Radio = tk.Radiobutton(Department_Window)
        self.Reffered_Radio.place(relx=0.208, rely=0.257, relheight=0.042
                , relwidth=0.18)
        self.Reffered_Radio.configure(activebackground="#ececec")
        self.Reffered_Radio.configure(activeforeground="#000000")
        self.Reffered_Radio.configure(background="#d9d9d9")
        self.Reffered_Radio.configure(disabledforeground="#a3a3a3")
        self.Reffered_Radio.configure(font=font11)
        self.Reffered_Radio.configure(foreground="#000000")
        self.Reffered_Radio.configure(highlightbackground="#d9d9d9")
        self.Reffered_Radio.configure(highlightcolor="black")
        self.Reffered_Radio.configure(justify='left')
        self.Reffered_Radio.configure(text='''Reffered''')
        self.Reffered_Radio.configure(value=2)
        self.Reffered_Radio.configure(variable=self.tr_radio)

        self.Screened_Radio = tk.Radiobutton(Department_Window)
        self.Screened_Radio.place(relx=0.408, rely=0.257, relheight=0.042
                                  , relwidth=0.18)
        self.Screened_Radio.configure(activebackground="#ececec")
        self.Screened_Radio.configure(activeforeground="#000000")
        self.Screened_Radio.configure(background="#d9d9d9")
        self.Screened_Radio.configure(disabledforeground="#a3a3a3")
        self.Screened_Radio.configure(font=font11)
        self.Screened_Radio.configure(foreground="#000000")
        self.Screened_Radio.configure(highlightbackground="#d9d9d9")
        self.Screened_Radio.configure(highlightcolor="black")
        self.Screened_Radio.configure(justify='left')
        self.Screened_Radio.configure(text='''Screened''')
        self.Screened_Radio.configure(value=3)
        self.Screened_Radio.configure(variable=self.tr_radio)

        self.populate_list()
    
    # Returns the list of all the entries in the window
    def get_entry_object(self):
        entries = [
            self.Date_Entry,
            self.on_radio,
            self.Health_Entry,
            self.From_Entry,
            self.To_Entry,
            self.Incharge_Entry,
            self.Phone_Entry,
            self.Endodontics_Entry,
            self.Periodont_Entry,
            self.Orthodontics_Entry,
            self.Surgery_Entry,
            self.Pedodont_Entry,
            self.Oralpatho_Entry,
            self.Public_Health_Entry,
            self.Oral_Mea_Entry,
            self.Ping_Thread_Entry,
            self.tr_radio,
            self.Grand_Total_Entry
        ]
        return entries
    
    # Adds a row to the database' respective table by getting inputs from entries
    def add_item(self):
        # Getting the values entered in each Entry box objects
        entries = self.get_entry_object()
        for i in range(0,len(entries)):
            entries[i] = entries[i].get()
        self.data.insert("dept", entries)
        self.clear_text()
        self.populate_list()
        print("1 row added")

    # Clears all the data entered in the entries
    def clear_text(self):
        entries = self.get_entry_object()
        for i in range(0,len(entries)):
            try:
                entries[i].delete(0, tk.END)
            except AttributeError:
                pass
    
    # Returns the item selected in the listbox
    def select_item(self):
        index = self.Scrolledlistbox3.curselection()[0]
        selected_item = self.Scrolledlistbox3.get(index)
        return selected_item

    # Removes the item selected in the listbox
    def remove_item(self):
        selected = self.select_item()
        print(selected[0])
        self.data.remove("dept", selected[0])
        self.populate_list()
        print("Selected Item deleted")

    # Updates the item selected in list box with the values entered in Entry boxes
    def update_item(self):
        selected = self.select_item()
        values = self.get_entry_object()
        # id of new_values is as same as the old value
        new_values = [selected[0]]
        for val in values[1:]:
            new_values.append(val.get())
        self.data.update("dept", new_values)
        self.clear_text()
        self.populate_list()
        print("Selected Item Updated")

    # Updates the list box with the current content of the table
    def populate_list(self):
        self.Scrolledlistbox3.delete(0,tk.END)
        for row in self.data.fetch("dept"):
            self.Scrolledlistbox3.insert(tk.END,row)
        self.count = self.data.get_count("dept")


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))


    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





