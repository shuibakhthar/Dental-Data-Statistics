#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Mar 07, 2020 03:55:11 PM IST  platform: Windows NT

import sys
from PIL import Image, ImageTk
import datetime
from tkcalendar import DateEntry
from tkinter import messagebox

import home_window_support
import os.path

import department_window
import department_window_support
import screening_camp_window
import screening_camp_window_support
import turnover_window
import turnover_window_support
import satelite_window
import satelite_window_support
import view_data_window1
import view_data_window1_support

from db import Database

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import turnover_single_window_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    turnover_single_window_support.set_Tk_var()
    top = Turnover_Single_Window (root)
    turnover_single_window_support.init(root, top)
    root.mainloop()

w = None
def create_Turnover_Single_Window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    turnover_single_window_support.set_Tk_var()
    top = Turnover_Single_Window (w)
    turnover_single_window_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Turnover_Single_Window():
    global w
    w.destroy()
    w = None

class Turnover_Single_Window:
    def __init__(self, Turnover_Single_Window=None):
        '''This class configures and populates the toplevel window.
        Turnover_Single_Window is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Helvetica} -size 10 -weight normal -slant" \
        " roman -underline 0 -overstrike 0"
        font11 = "-family {Helvetica} -size 13 -weight normal -slant " \
        "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant " \
        "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        self.data = Database("dental.db")
        if sys.platform == "win32":
            self.style.theme_use('winnative')
            self.style.configure('.', background=_bgcolor)
            self.style.configure('.', foreground=_fgcolor)
            self.style.map('.', background=
            [('selected', _compcolor), ('active', _ana2color)])

        Turnover_Single_Window.geometry("1491x739+35+31")
        Turnover_Single_Window.minsize(148, 1)
        Turnover_Single_Window.maxsize(4112, 1055)
        Turnover_Single_Window.resizable(1, 1)
        Turnover_Single_Window.title("Turn Over Window")
        Turnover_Single_Window.configure(background="#40b3a3")

        self.menubar = tk.Menu(Turnover_Single_Window, font=font9, bg=_bgcolor, fg=_fgcolor)
        Turnover_Single_Window.configure(menu=self.menubar)

        self.File = tk.Menu(Turnover_Single_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.File,
                                 activebackground="#ececec",
                                 activeforeground="#000000",
                                 background="#d9d9d9",
                                 font=(
                                     '-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
                                 foreground="#000000",
                                 label="File")
        self.File.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
            foreground="#000000",
            label="Group Entries",
            command= self.turnover)

        self.File.add_command(
            activebackground="#ececec",
            activeforeground="#000000",
            background="#d9d9d9",
            font=('-family {Segoe UI} -size 9 -weight normal -slant roman -underline 0 -overstrike 0'),
            foreground="#000000",
            label="Exit",
            command=turnover_single_window_support.destroy_window)

        self.Department_Label = tk.Label(Turnover_Single_Window)
        self.Department_Label.place(relx=0.241, rely=0.027, relwidth=0.518, relheight=0.084)
        self.Department_Label.configure(activebackground="#f9f9f9")
        self.Department_Label.configure(activeforeground="black")
        self.Department_Label.configure(background="#d9d9d9")
        self.Department_Label.configure(disabledforeground="#a3a3a3")
        self.Department_Label.configure(font="-family {Helvetica} -size 18 -weight normal")
        self.Department_Label.configure(foreground="#000000")
        self.Department_Label.configure(highlightbackground="#d9d9d9")
        self.Department_Label.configure(highlightcolor="black")
        self.Department_Label.configure(relief="raised")
        self.Department_Label.configure(text='''Turn Over Patient''')

        # self.on_radio = tk.IntVar(None, 1)
        # self.Old_Patient_Radio = tk.Radiobutton(Turnover_Single_Window)
        # self.Old_Patient_Radio.place(relx=0.013, rely=0.124, relheight=0.042, relwidth=0.18)
        # self.Old_Patient_Radio.configure(activebackground="#ececec")
        # self.Old_Patient_Radio.configure(activeforeground="#000000")
        # self.Old_Patient_Radio.configure(background="#d9d9d9")
        # self.Old_Patient_Radio.configure(disabledforeground="#a3a3a3")
        # self.Old_Patient_Radio.configure(font=font11)
        # self.Old_Patient_Radio.configure(foreground="#000000")
        # self.Old_Patient_Radio.configure(highlightbackground="#d9d9d9")
        # self.Old_Patient_Radio.configure(highlightcolor="black")
        # self.Old_Patient_Radio.configure(justify='left')
        # self.Old_Patient_Radio.configure(text='''Old Patient''')
        # self.Old_Patient_Radio.configure(value=1)
        # self.Old_Patient_Radio.configure(variable=self.on_radio)
        #
        # self.New_Patient_Radio = tk.Radiobutton(Turnover_Single_Window)
        # self.New_Patient_Radio.place(relx=0.213, rely=0.124, relheight=0.042, relwidth=0.18)
        # self.New_Patient_Radio.configure(activebackground="#ececec")
        # self.New_Patient_Radio.configure(activeforeground="#000000")
        # self.New_Patient_Radio.configure(background="#d9d9d9")
        # self.New_Patient_Radio.configure(disabledforeground="#a3a3a3")
        # self.New_Patient_Radio.configure(font=font11)
        # self.New_Patient_Radio.configure(foreground="#000000")
        # self.New_Patient_Radio.configure(highlightbackground="#d9d9d9")
        # self.New_Patient_Radio.configure(highlightcolor="black")
        # self.New_Patient_Radio.configure(justify='left')
        # self.New_Patient_Radio.configure(text='''New Patient''')
        # self.New_Patient_Radio.configure(value=2)
        # self.New_Patient_Radio.configure(variable=self.on_radio)

        self.Date_Label = tk.Label(Turnover_Single_Window)
        self.Date_Label.place(relx=0.013, rely=0.124, relheight=0.058, relwidth=0.169)
        self.Date_Label.configure(activebackground="#f9f9f9")
        self.Date_Label.configure(activeforeground="black")
        self.Date_Label.configure(background="#d9d9d9")
        self.Date_Label.configure(disabledforeground="#a3a3a3")
        self.Date_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Date_Label.configure(foreground="#000000")
        self.Date_Label.configure(highlightbackground="#d9d9d9")
        self.Date_Label.configure(highlightcolor="black")
        self.Date_Label.configure(text='''* Date\nYYYY-MM-DD''')

        now = datetime.datetime.now()
        self.Date_Entry = DateEntry(Turnover_Single_Window, year=now.year, month=now.month, day=now.day)
        self.Date_Entry.place(relx=0.193, rely=0.124, relheight=0.042, relwidth=0.18)
        self.Date_Entry.configure(background="white")
        self.Date_Entry.configure(date_pattern='y-mm-dd')
        self.Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.Date_Entry.configure(foreground="#000000")
        self.Date_Entry.configure(borderwidth=2)
        self.Date_Entry.configure(width=12)

        self.He_radio = tk.IntVar(None, 0)
        self.Health_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Health_Check.place(relx=0.413, rely=0.124, relwidth=0.18, relheight=0.042)
        self.Health_Check.configure(activebackground="#ececec")
        self.Health_Check.configure(activeforeground="#000000")
        self.Health_Check.configure(background="#d9d9d9")
        self.Health_Check.configure(disabledforeground="#a3a3a3")
        self.Health_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Health_Check.configure(foreground="#000000")
        self.Health_Check.configure(highlightbackground="#d9d9d9")
        self.Health_Check.configure(highlightcolor="black")
        self.Health_Check.configure(justify='left')
        self.Health_Check.configure(text='''Health Education''')
        self.Health_Check.configure(variable=self.He_radio)

        self.Health_Label = tk.Label(Turnover_Single_Window)
        self.Health_Label.place(relx=0.599, rely=0.124, relheight=0.048
                                , relwidth=0.137)
        self.Health_Label.configure(background="#40b3a3")
        self.Health_Label.configure(disabledforeground="#a3a3a3")
        self.Health_Label.configure(font="-family {Helvetica} -size 10")
        self.Health_Label.configure(foreground="#000000")
        self.Health_Label.configure(highlightbackground="#d9d9d9")
        self.Health_Label.configure(highlightcolor="black")
        self.Health_Label.configure(relief="groove")


        self.Incharge_Label = tk.Label(Turnover_Single_Window)
        self.Incharge_Label.place(relx=0.013, rely=0.189, relwidth=0.169, relheight=0.05)
        self.Incharge_Label.configure(activebackground="#f9f9f9")
        self.Incharge_Label.configure(activeforeground="black")
        self.Incharge_Label.configure(background="#d9d9d9")
        self.Incharge_Label.configure(disabledforeground="#a3a3a3")
        self.Incharge_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Incharge_Label.configure(foreground="#000000")
        self.Incharge_Label.configure(highlightbackground="#d9d9d9")
        self.Incharge_Label.configure(highlightcolor="black")
        self.Incharge_Label.configure(text='''* Incharge''')

        self.Incharge_Entry = tk.Entry(Turnover_Single_Window)
        self.Incharge_Entry.place(relx=0.188, rely=0.189, relheight=0.048
                                  , relwidth=0.137)
        self.Incharge_Entry.configure(background="white")
        self.Incharge_Entry.configure(disabledforeground="#a3a3a3")
        self.Incharge_Entry.configure(font="-family {Helvetica} -size 10")
        self.Incharge_Entry.configure(foreground="#000000")
        self.Incharge_Entry.configure(highlightbackground="#d9d9d9")
        self.Incharge_Entry.configure(highlightcolor="black")
        self.Incharge_Entry.configure(insertbackground="black")
        self.Incharge_Entry.configure(selectbackground="#c4c4c4")
        self.Incharge_Entry.configure(selectforeground="black")

        self.Phone_Label = tk.Label(Turnover_Single_Window)
        self.Phone_Label.place(relx=0.335, rely=0.189, relwidth=0.162, relheight=0.05)
        self.Phone_Label.configure(activebackground="#f9f9f9")
        self.Phone_Label.configure(activeforeground="black")
        self.Phone_Label.configure(background="#d9d9d9")
        self.Phone_Label.configure(disabledforeground="#a3a3a3")
        self.Phone_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Phone_Label.configure(foreground="#000000")
        self.Phone_Label.configure(highlightbackground="#d9d9d9")
        self.Phone_Label.configure(highlightcolor="black")
        self.Phone_Label.configure(text='''* Phone''')

        self.Phone_Entry = tk.Entry(Turnover_Single_Window)
        self.Phone_Entry.place(relx=0.51, rely=0.189, relheight=0.048, relwidth=0.137)
        self.Phone_Entry.configure(background="white")
        self.Phone_Entry.configure(disabledforeground="#a3a3a3")
        self.Phone_Entry.configure(font="-family {Helvetica} -size 10")
        self.Phone_Entry.configure(foreground="#000000")
        self.Phone_Entry.configure(highlightbackground="#d9d9d9")
        self.Phone_Entry.configure(highlightcolor="black")
        self.Phone_Entry.configure(insertbackground="black")
        self.Phone_Entry.configure(selectbackground="#c4c4c4")
        self.Phone_Entry.configure(selectforeground="black")


        # self.Date_Entry = tk.Entry(Turnover_Single_Window)
        # self.Date_Entry.place(relx=0.791, rely=0.189, relheight=0.048, relwidth=0.137)
        # self.Date_Entry.configure(background="white")
        # self.Date_Entry.configure(disabledforeground="#a3a3a3")
        # self.Date_Entry.configure(font="-family {Helvetica} -size 10")
        # self.Date_Entry.configure(foreground="#000000")
        # self.Date_Entry.configure(highlightbackground="#d9d9d9")
        # self.Date_Entry.configure(highlightcolor="black")
        # self.Date_Entry.configure(insertbackground="black")
        # self.Date_Entry.configure(selectbackground="#c4c4c4")
        # self.Date_Entry.configure(selectforeground="black")

        self.ID_Label = tk.Label(Turnover_Single_Window)
        self.ID_Label.place(relx=0.013, rely=0.311, relwidth=0.102, relheight=0.05)
        self.ID_Label.configure(activebackground="#f9f9f9")
        self.ID_Label.configure(activeforeground="black")
        self.ID_Label.configure(background="#d9d9d9")
        self.ID_Label.configure(disabledforeground="#a3a3a3")
        self.ID_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.ID_Label.configure(foreground="#000000")
        self.ID_Label.configure(highlightbackground="#d9d9d9")
        self.ID_Label.configure(highlightcolor="black")
        self.ID_Label.configure(text='''* ID ''')

        self.ID_Entry = tk.Entry(Turnover_Single_Window)
        self.ID_Entry.place(relx=0.12, rely=0.311, relwidth=0.102, relheight=0.048)
        self.ID_Entry.configure(background="white")
        self.ID_Entry.configure(disabledforeground="#a3a3a3")
        self.ID_Entry.configure(font="-family {Helvetica} -size 10")
        self.ID_Entry.configure(foreground="#000000")
        self.ID_Entry.configure(highlightbackground="#d9d9d9")
        self.ID_Entry.configure(highlightcolor="black")
        self.ID_Entry.configure(insertbackground="black")
        self.ID_Entry.configure(selectbackground="#c4c4c4")
        self.ID_Entry.configure(selectforeground="black")

        self.Patient_Name_Label = tk.Label(Turnover_Single_Window)
        self.Patient_Name_Label.place(relx=0.23, rely=0.311, relwidth=0.102, relheight=0.05)
        self.Patient_Name_Label.configure(activebackground="#f9f9f9")
        self.Patient_Name_Label.configure(activeforeground="black")
        self.Patient_Name_Label.configure(background="#d9d9d9")
        self.Patient_Name_Label.configure(disabledforeground="#a3a3a3")
        self.Patient_Name_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Patient_Name_Label.configure(foreground="#000000")
        self.Patient_Name_Label.configure(highlightbackground="#d9d9d9")
        self.Patient_Name_Label.configure(highlightcolor="black")
        self.Patient_Name_Label.configure(text='''* Patient Name''')

        self.Patient_Name_Entry = tk.Entry(Turnover_Single_Window)
        self.Patient_Name_Entry.place(relx=0.342, rely=0.311, relwidth=0.102, relheight=0.048)
        self.Patient_Name_Entry.configure(background="white")
        self.Patient_Name_Entry.configure(disabledforeground="#a3a3a3")
        self.Patient_Name_Entry.configure(font="-family {Helvetica} -size 10")
        self.Patient_Name_Entry.configure(foreground="#000000")
        self.Patient_Name_Entry.configure(highlightbackground="#d9d9d9")
        self.Patient_Name_Entry.configure(highlightcolor="black")
        self.Patient_Name_Entry.configure(insertbackground="black")
        self.Patient_Name_Entry.configure(selectbackground="#c4c4c4")
        self.Patient_Name_Entry.configure(selectforeground="black")

        self.Patient_Phone_Label = tk.Label(Turnover_Single_Window)
        self.Patient_Phone_Label.place(relx=0.45, rely=0.311, relwidth=0.102, relheight=0.05)
        self.Patient_Phone_Label.configure(activebackground="#f9f9f9")
        self.Patient_Phone_Label.configure(activeforeground="black")
        self.Patient_Phone_Label.configure(background="#d9d9d9")
        self.Patient_Phone_Label.configure(disabledforeground="#a3a3a3")
        self.Patient_Phone_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Patient_Phone_Label.configure(foreground="#000000")
        self.Patient_Phone_Label.configure(highlightbackground="#d9d9d9")
        self.Patient_Phone_Label.configure(highlightcolor="black")
        self.Patient_Phone_Label.configure(text='''Patient Phone NO''')

        self.Patient_Phone_Entry = tk.Entry(Turnover_Single_Window)
        self.Patient_Phone_Entry.place(relx=0.56, rely=0.311, relwidth=0.089, relheight=0.048)
        self.Patient_Phone_Entry.configure(background="white")
        self.Patient_Phone_Entry.configure(disabledforeground="#a3a3a3")
        self.Patient_Phone_Entry.configure(font="-family {Helvetica} -size 10")
        self.Patient_Phone_Entry.configure(foreground="#000000")
        self.Patient_Phone_Entry.configure(highlightbackground="#d9d9d9")
        self.Patient_Phone_Entry.configure(highlightcolor="black")
        self.Patient_Phone_Entry.configure(insertbackground="black")
        self.Patient_Phone_Entry.configure(selectbackground="#c4c4c4")
        self.Patient_Phone_Entry.configure(selectforeground="black")

        self.Endodontics_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Endodontics_Check.place(relx=0.013, rely=0.379, relwidth=0.162, relheight=0.05)
        self.Endodontics_Check.configure(activebackground="#ececec")
        self.Endodontics_Check.configure(activeforeground="#000000")
        self.Endodontics_Check.configure(background="#d9d9d9")
        self.Endodontics_Check.configure(disabledforeground="#a3a3a3")
        self.Endodontics_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Endodontics_Check.configure(foreground="#000000")
        self.Endodontics_Check.configure(highlightbackground="#d9d9d9")
        self.Endodontics_Check.configure(highlightcolor="black")
        self.Endodontics_Check.configure(justify='left')
        self.Endodontics_Check.configure(text='''Endodontics ''')
        self.Endodontics_Check.configure(variable=turnover_single_window_support.Endodontics)

        self.Periodont_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Periodont_Check.place(relx=0.013, rely=0.447, relwidth=0.162, relheight=0.05)
        self.Periodont_Check.configure(activebackground="#ececec")
        self.Periodont_Check.configure(activeforeground="#000000")
        self.Periodont_Check.configure(background="#d9d9d9")
        self.Periodont_Check.configure(disabledforeground="#a3a3a3")
        self.Periodont_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Periodont_Check.configure(foreground="#000000")
        self.Periodont_Check.configure(highlightbackground="#d9d9d9")
        self.Periodont_Check.configure(highlightcolor="black")
        self.Periodont_Check.configure(justify='left')
        self.Periodont_Check.configure(text='''Periodontics  ''')
        self.Periodont_Check.configure(variable=turnover_single_window_support.Periodont)

        self.Orthodontics_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Orthodontics_Check.place(relx=0.013, rely=0.514, relwidth=0.162, relheight=0.05)
        self.Orthodontics_Check.configure(activebackground="#ececec")
        self.Orthodontics_Check.configure(activeforeground="#000000")
        self.Orthodontics_Check.configure(background="#d9d9d9")
        self.Orthodontics_Check.configure(disabledforeground="#a3a3a3")
        self.Orthodontics_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Orthodontics_Check.configure(foreground="#000000")
        self.Orthodontics_Check.configure(highlightbackground="#d9d9d9")
        self.Orthodontics_Check.configure(highlightcolor="black")
        self.Orthodontics_Check.configure(justify='left')
        self.Orthodontics_Check.configure(text='''Orthodontics''')
        self.Orthodontics_Check.configure(variable=turnover_single_window_support.Orthodontics)

        self.Surgery_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Surgery_Check.place(relx=0.013, rely=0.582, relwidth=0.162, relheight=0.05)
        self.Surgery_Check.configure(activebackground="#ececec")
        self.Surgery_Check.configure(activeforeground="#000000")
        self.Surgery_Check.configure(background="#d9d9d9")
        self.Surgery_Check.configure(disabledforeground="#a3a3a3")
        self.Surgery_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Surgery_Check.configure(foreground="#000000")
        self.Surgery_Check.configure(highlightbackground="#d9d9d9")
        self.Surgery_Check.configure(highlightcolor="black")
        self.Surgery_Check.configure(justify='left')
        self.Surgery_Check.configure(text='''Oral Surgery ''')
        self.Surgery_Check.configure(variable=turnover_single_window_support.Surgery)

        self.Pedodont_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Pedodont_Check.place(relx=0.013, rely=0.65, relwidth=0.162, relheight=0.05)
        self.Pedodont_Check.configure(activebackground="#ececec")
        self.Pedodont_Check.configure(activeforeground="#000000")
        self.Pedodont_Check.configure(background="#d9d9d9")
        self.Pedodont_Check.configure(disabledforeground="#a3a3a3")
        self.Pedodont_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Pedodont_Check.configure(foreground="#000000")
        self.Pedodont_Check.configure(highlightbackground="#d9d9d9")
        self.Pedodont_Check.configure(highlightcolor="black")
        self.Pedodont_Check.configure(justify='left')
        self.Pedodont_Check.configure(text='''Pedodontics ''')
        self.Pedodont_Check.configure(variable=turnover_single_window_support.Pedodont)

        self.Oralpatho_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Oralpatho_Check.place(relx=0.335, rely=0.379, relwidth=0.162, relheight=0.05)
        self.Oralpatho_Check.configure(activebackground="#ececec")
        self.Oralpatho_Check.configure(activeforeground="#000000")
        self.Oralpatho_Check.configure(background="#d9d9d9")
        self.Oralpatho_Check.configure(disabledforeground="#a3a3a3")
        self.Oralpatho_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Oralpatho_Check.configure(foreground="#000000")
        self.Oralpatho_Check.configure(highlightbackground="#d9d9d9")
        self.Oralpatho_Check.configure(highlightcolor="black")
        self.Oralpatho_Check.configure(justify='left')
        self.Oralpatho_Check.configure(text='''Oral Pathology''')
        self.Oralpatho_Check.configure(variable=turnover_single_window_support.Oralpatho)

        self.Public_Health_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Public_Health_Check.place(relx=0.335, rely=0.447, relwidth=0.162, relheight=0.05)
        self.Public_Health_Check.configure(activebackground="#ececec")
        self.Public_Health_Check.configure(activeforeground="#000000")
        self.Public_Health_Check.configure(background="#d9d9d9")
        self.Public_Health_Check.configure(disabledforeground="#a3a3a3")
        self.Public_Health_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Public_Health_Check.configure(foreground="#000000")
        self.Public_Health_Check.configure(highlightbackground="#d9d9d9")
        self.Public_Health_Check.configure(highlightcolor="black")
        self.Public_Health_Check.configure(justify='left')
        self.Public_Health_Check.configure(text='''Public Health    ''')
        self.Public_Health_Check.configure(variable=turnover_single_window_support.Public_Health)

        self.Oralmea_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Oralmea_Check.place(relx=0.335, rely=0.514, relwidth=0.162, relheight=0.05)
        self.Oralmea_Check.configure(activebackground="#ececec")
        self.Oralmea_Check.configure(activeforeground="#000000")
        self.Oralmea_Check.configure(background="#d9d9d9")
        self.Oralmea_Check.configure(disabledforeground="#a3a3a3")
        self.Oralmea_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Oralmea_Check.configure(foreground="#000000")
        self.Oralmea_Check.configure(highlightbackground="#d9d9d9")
        self.Oralmea_Check.configure(highlightcolor="black")
        self.Oralmea_Check.configure(justify='left')
        self.Oralmea_Check.configure(text='''Oral Medicine    ''')
        self.Oralmea_Check.configure(variable=turnover_single_window_support.Oral_Mea)

        self.Prostho_Check = tk.Checkbutton(Turnover_Single_Window)
        self.Prostho_Check.place(relx=0.335, rely=0.582, relwidth=0.162, relheight=0.05)
        self.Prostho_Check.configure(activebackground="#ececec")
        self.Prostho_Check.configure(activeforeground="#000000")
        self.Prostho_Check.configure(background="#d9d9d9")
        self.Prostho_Check.configure(disabledforeground="#a3a3a3")
        self.Prostho_Check.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Prostho_Check.configure(foreground="#000000")
        self.Prostho_Check.configure(highlightbackground="#d9d9d9")
        self.Prostho_Check.configure(highlightcolor="black")
        self.Prostho_Check.configure(justify='left')
        self.Prostho_Check.configure(text='''Prosthodontics ''')
        self.Prostho_Check.configure(variable=turnover_single_window_support.Prostho)

        self.Grand_Total_Label = tk.Label(Turnover_Single_Window)
        self.Grand_Total_Label.place(relx=0.335, rely=0.65, relwidth=0.162, relheight=0.05)

        self.Grand_Total_Label.configure(activebackground="#f9f9f9")
        self.Grand_Total_Label.configure(activeforeground="black")
        self.Grand_Total_Label.configure(background="#d9d9d9")
        self.Grand_Total_Label.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Label.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Grand_Total_Label.configure(foreground="#000000")
        self.Grand_Total_Label.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Label.configure(highlightcolor="black")
        self.Grand_Total_Label.configure(text='''Total''')

        # Defining the entries

        self.Endodontics_Label = tk.Label(Turnover_Single_Window)
        self.Endodontics_Label.place(relx=0.188, rely=0.379, relwidth=0.137, relheight=0.048)
        self.Endodontics_Label.configure(background="#40b3a3")
        self.Endodontics_Label.configure(disabledforeground="#a3a3a3")
        self.Endodontics_Label.configure(font="-family {Helvetica} -size 10")
        self.Endodontics_Label.configure(foreground="#000000")
        self.Endodontics_Label.configure(highlightbackground="#d9d9d9")
        self.Endodontics_Label.configure(highlightcolor="black")
        self.Endodontics_Label.configure(relief="groove")


        self.Periodont_Label = tk.Label(Turnover_Single_Window)
        self.Periodont_Label.place(relx=0.188, rely=0.447, relwidth=0.137, relheight=0.048)
        self.Periodont_Label.configure(background="#40b3a3")
        self.Periodont_Label.configure(disabledforeground="#a3a3a3")
        self.Periodont_Label.configure(font="-family {Helvetica} -size 10")
        self.Periodont_Label.configure(foreground="#000000")
        self.Periodont_Label.configure(highlightbackground="#d9d9d9")
        self.Periodont_Label.configure(highlightcolor="black")
        self.Periodont_Label.configure(relief="groove")


        self.Orthodontics_Label = tk.Label(Turnover_Single_Window)
        self.Orthodontics_Label.place(relx=0.188, rely=0.514, relwidth=0.137, relheight=0.048)
        self.Orthodontics_Label.configure(background="#40b3a3")
        self.Orthodontics_Label.configure(disabledforeground="#a3a3a3")
        self.Orthodontics_Label.configure(font="-family {Helvetica} -size 10")
        self.Orthodontics_Label.configure(foreground="#000000")
        self.Orthodontics_Label.configure(highlightbackground="#d9d9d9")
        self.Orthodontics_Label.configure(highlightcolor="black")
        self.Orthodontics_Label.configure(relief="groove")


        self.Surgery_Label = tk.Label(Turnover_Single_Window)
        self.Surgery_Label.place(relx=0.188, rely=0.582, relwidth=0.137, relheight=0.048)
        self.Surgery_Label.configure(background="#40b3a3")
        self.Surgery_Label.configure(disabledforeground="#a3a3a3")
        self.Surgery_Label.configure(font="-family {Helvetica} -size 10")
        self.Surgery_Label.configure(foreground="#000000")
        self.Surgery_Label.configure(highlightbackground="#d9d9d9")
        self.Surgery_Label.configure(highlightcolor="black")
        self.Surgery_Label.configure(relief="groove")


        self.Pedodont_Label = tk.Label(Turnover_Single_Window)
        self.Pedodont_Label.place(relx=0.188, rely=0.65, relwidth=0.137, relheight=0.048)
        self.Pedodont_Label.configure(background="#40b3a3")
        self.Pedodont_Label.configure(disabledforeground="#a3a3a3")
        self.Pedodont_Label.configure(font="-family {Helvetica} -size 10")
        self.Pedodont_Label.configure(foreground="#000000")
        self.Pedodont_Label.configure(highlightbackground="#d9d9d9")
        self.Pedodont_Label.configure(highlightcolor="black")
        self.Pedodont_Label.configure(relief="groove")


        self.Oralpatho_Label = tk.Label(Turnover_Single_Window)
        self.Oralpatho_Label.place(relx=0.51, rely=0.379, relwidth=0.137, relheight=0.048)
        self.Oralpatho_Label.configure(background="#40b3a3")
        self.Oralpatho_Label.configure(disabledforeground="#a3a3a3")
        self.Oralpatho_Label.configure(font="-family {Helvetica} -size 10")
        self.Oralpatho_Label.configure(foreground="#000000")
        self.Oralpatho_Label.configure(highlightbackground="#d9d9d9")
        self.Oralpatho_Label.configure(highlightcolor="black")
        self.Oralpatho_Label.configure(relief="groove")

        self.Public_Health_Label = tk.Label(Turnover_Single_Window)
        self.Public_Health_Label.place(relx=0.51, rely=0.447, relwidth=0.137, relheight=0.048)
        self.Public_Health_Label.configure(background="#40b3a3")
        self.Public_Health_Label.configure(disabledforeground="#a3a3a3")
        self.Public_Health_Label.configure(font="-family {Helvetica} -size 10")
        self.Public_Health_Label.configure(foreground="#000000")
        self.Public_Health_Label.configure(highlightbackground="#d9d9d9")
        self.Public_Health_Label.configure(highlightcolor="black")
        self.Public_Health_Label.configure(relief="groove")


        self.Oral_Mea_Label = tk.Label(Turnover_Single_Window)
        self.Oral_Mea_Label.place(relx=0.51, rely=0.514, relwidth=0.137, relheight=0.048)
        self.Oral_Mea_Label.configure(background="#40b3a3")
        self.Oral_Mea_Label.configure(disabledforeground="#a3a3a3")
        self.Oral_Mea_Label.configure(font="-family {Helvetica} -size 10")
        self.Oral_Mea_Label.configure(foreground="#000000")
        self.Oral_Mea_Label.configure(highlightbackground="#d9d9d9")
        self.Oral_Mea_Label.configure(highlightcolor="black")
        self.Oral_Mea_Label.configure(relief="groove")


        self.Prostho_Label = tk.Label(Turnover_Single_Window)
        self.Prostho_Label.place(relx=0.51, rely=0.582, relwidth=0.137, relheight=0.048)
        self.Prostho_Label.configure(background="#40b3a3")
        self.Prostho_Label.configure(disabledforeground="#a3a3a3")
        self.Prostho_Label.configure(font="-family {Helvetica} -size 10")
        self.Prostho_Label.configure(foreground="#000000")
        self.Prostho_Label.configure(highlightbackground="#d9d9d9")
        self.Prostho_Label.configure(highlightcolor="black")
        self.Prostho_Label.configure(relief="groove")


        self.Grand_Total_Label = tk.Label(Turnover_Single_Window)
        self.Grand_Total_Label.place(relx=0.51, rely=0.65, relwidth=0.137, relheight=0.048)
        self.Grand_Total_Label.configure(background="#40b3a3")
        self.Grand_Total_Label.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Label.configure(font="-family {Helvetica} -size 10")
        self.Grand_Total_Label.configure(foreground="#000000")
        self.Grand_Total_Label.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Label.configure(highlightcolor="black")
        self.Grand_Total_Label.configure(relief="groove")


        self.Add_Button_ = tk.Button(Turnover_Single_Window)
        self.Add_Button_.place(relx=0.798, rely=0.311, relwidth=0.078, relheight=0.06)
        self.Add_Button_.configure(activebackground="#ececec")
        self.Add_Button_.configure(activeforeground="#000000")
        self.Add_Button_.configure(background="#d9d9d9")
        self.Add_Button_.configure(disabledforeground="#a3a3a3")
        self.Add_Button_.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Add_Button_.configure(foreground="#000000")
        self.Add_Button_.configure(highlightbackground="#d9d9d9")
        self.Add_Button_.configure(highlightcolor="black")
        self.Add_Button_.configure(pady="0")
        self.Add_Button_.configure(text='''ADD''', command=self.add_item)

        self.Delete_Button = tk.Button(Turnover_Single_Window)
        self.Delete_Button.place(relx=0.798, rely=0.392, relwidth=0.078, relheight=0.06)
        self.Delete_Button.configure(activebackground="#ececec")
        self.Delete_Button.configure(activeforeground="#000000")
        self.Delete_Button.configure(background="#d9d9d9")
        self.Delete_Button.configure(disabledforeground="#a3a3a3")
        self.Delete_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Delete_Button.configure(foreground="#000000")
        self.Delete_Button.configure(highlightbackground="#d9d9d9")
        self.Delete_Button.configure(highlightcolor="black")
        self.Delete_Button.configure(pady="0")
        self.Delete_Button.configure(text='''DELETE''', command=self.remove_item)

        self.Update_Button = tk.Button(Turnover_Single_Window)
        self.Update_Button.place(relx=0.798, rely=0.474, relwidth=0.078, relheight=0.06)
        self.Update_Button.configure(activebackground="#ececec")
        self.Update_Button.configure(activeforeground="#000000")
        self.Update_Button.configure(background="#d9d9d9")
        self.Update_Button.configure(disabledforeground="#a3a3a3")
        self.Update_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Update_Button.configure(foreground="#000000")
        self.Update_Button.configure(highlightbackground="#d9d9d9")
        self.Update_Button.configure(highlightcolor="black")
        self.Update_Button.configure(pady="0")
        self.Update_Button.configure(text='''UPDATE''', command=self.update_item)

        self.Clear_Button = tk.Button(Turnover_Single_Window)
        self.Clear_Button.place(relx=0.798, rely=0.555, relwidth=0.078, relheight=0.06)
        self.Clear_Button.configure(activebackground="#ececec")
        self.Clear_Button.configure(activeforeground="#000000")
        self.Clear_Button.configure(background="#d9d9d9")
        self.Clear_Button.configure(disabledforeground="#a3a3a3")
        self.Clear_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Clear_Button.configure(foreground="#000000")
        self.Clear_Button.configure(highlightbackground="#d9d9d9")
        self.Clear_Button.configure(highlightcolor="black")
        self.Clear_Button.configure(pady="0")
        self.Clear_Button.configure(text='''CLEAR''', command=self.clear_text)

        self.Refresh_Button = tk.Button(Turnover_Single_Window)
        self.Refresh_Button.place(relx=0.798, rely=0.63, relwidth=0.078, relheight=0.06)
        self.Refresh_Button.configure(activebackground="#ececec")
        self.Refresh_Button.configure(activeforeground="#000000")
        self.Refresh_Button.configure(background="#d9d9d9")
        self.Refresh_Button.configure(disabledforeground="#a3a3a3")
        self.Refresh_Button.configure(font="-family {Helvetica} -size 13 -weight normal")
        self.Refresh_Button.configure(foreground="#000000")
        self.Refresh_Button.configure(highlightbackground="#d9d9d9")
        self.Refresh_Button.configure(highlightcolor="black")
        self.Refresh_Button.configure(pady="0")
        self.Refresh_Button.configure(text='''REFRESH''', command=self.populate_list)

        self.Scrolledtreeview1 = ScrolledTreeView(Turnover_Single_Window)
        self.Scrolledtreeview1.place(relx=0.02, rely=0.717, relheight=0.253
                                     , relwidth=0.969)
        self.Scrolledtreeview1.configure(columns=(
            "Id", "Date", "T/R/S", "Incharge", "Phone_no", "Patient_name", "Patient_contact", "Health_education",

            "Endodontics", "Periodont", "Orthodontics", "Surgery", "Pedodont", "Oral_Patho",
            "Public_Health", "Oral_Mea", "Prostho", "Total"))
        # self.Scrolledtreeview1.configure(columns="Col2")
        # self.Scrolledtreeview1.configure(columns="Col3")

        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0", text="S.NO")
        self.Scrolledtreeview1.heading("#0", anchor="center")
        self.Scrolledtreeview1.column("#0", width="50")
        self.Scrolledtreeview1.column("#0", minwidth="20")
        self.Scrolledtreeview1.column("#0", stretch="1")
        self.Scrolledtreeview1.column("#0", anchor="center")

        self.Scrolledtreeview1.heading("Id", text="ID")
        self.Scrolledtreeview1.heading("Id", anchor="center")
        self.Scrolledtreeview1.column("Id", width="100")
        self.Scrolledtreeview1.column("Id", minwidth="20")
        self.Scrolledtreeview1.column("Id", stretch="1")
        self.Scrolledtreeview1.column("Id", anchor="center")

        self.Scrolledtreeview1.heading("Date", text="Date")
        self.Scrolledtreeview1.heading("Date", anchor="center")
        self.Scrolledtreeview1.column("Date", width="100")
        self.Scrolledtreeview1.column("Date", minwidth="20")
        self.Scrolledtreeview1.column("Date", stretch="1")
        self.Scrolledtreeview1.column("Date", anchor="w")

        self.Scrolledtreeview1.heading("T/R/S", text="T/R/S")
        self.Scrolledtreeview1.heading("T/R/S", anchor="center")
        self.Scrolledtreeview1.column("T/R/S", width="100")
        self.Scrolledtreeview1.column("T/R/S", minwidth="20")
        self.Scrolledtreeview1.column("T/R/S", stretch="1")
        self.Scrolledtreeview1.column("T/R/S", anchor="center")


        self.Scrolledtreeview1.heading("Incharge", text="Incharge")
        self.Scrolledtreeview1.heading("Incharge", anchor="center")
        self.Scrolledtreeview1.column("Incharge", width="100")
        self.Scrolledtreeview1.column("Incharge", minwidth="20")
        self.Scrolledtreeview1.column("Incharge", stretch="1")
        self.Scrolledtreeview1.column("Incharge", anchor="center")

        self.Scrolledtreeview1.heading("Phone_no", text="Phone no")
        self.Scrolledtreeview1.heading("Phone_no", anchor="center")
        self.Scrolledtreeview1.column("Phone_no", width="100")
        self.Scrolledtreeview1.column("Phone_no", minwidth="20")
        self.Scrolledtreeview1.column("Phone_no", stretch="1")
        self.Scrolledtreeview1.column("Phone_no", anchor="center")

        self.Scrolledtreeview1.heading("Patient_name", text="Patient Name")
        self.Scrolledtreeview1.heading("Patient_name", anchor="center")
        self.Scrolledtreeview1.column("Patient_name", width="100")
        self.Scrolledtreeview1.column("Patient_name", minwidth="20")
        self.Scrolledtreeview1.column("Patient_name", stretch="1")
        self.Scrolledtreeview1.column("Patient_name", anchor="center")

        self.Scrolledtreeview1.heading("Patient_contact", text="Patient Contact")
        self.Scrolledtreeview1.heading("Patient_contact", anchor="center")
        self.Scrolledtreeview1.column("Patient_contact", width="100")
        self.Scrolledtreeview1.column("Patient_contact", minwidth="20")
        self.Scrolledtreeview1.column("Patient_contact", stretch="1")
        self.Scrolledtreeview1.column("Patient_contact", anchor="center")

        self.Scrolledtreeview1.heading("Health_education", text="Health Education given")
        self.Scrolledtreeview1.heading("Health_education", anchor="center")
        self.Scrolledtreeview1.column("Health_education", width="100")
        self.Scrolledtreeview1.column("Health_education", minwidth="20")
        self.Scrolledtreeview1.column("Health_education", stretch="1")
        self.Scrolledtreeview1.column("Health_education", anchor="center")

        self.Scrolledtreeview1.heading("Endodontics", text="Endodontics")
        self.Scrolledtreeview1.heading("Endodontics", anchor="center")
        self.Scrolledtreeview1.column("Endodontics", width="100")
        self.Scrolledtreeview1.column("Endodontics", minwidth="20")
        self.Scrolledtreeview1.column("Endodontics", stretch="1")
        self.Scrolledtreeview1.column("Endodontics", anchor="center")

        self.Scrolledtreeview1.heading("Periodont", text="Periodont")
        self.Scrolledtreeview1.heading("Periodont", anchor="center")
        self.Scrolledtreeview1.column("Periodont", width="100")
        self.Scrolledtreeview1.column("Periodont", minwidth="20")
        self.Scrolledtreeview1.column("Periodont", stretch="1")
        self.Scrolledtreeview1.column("Periodont", anchor="center")

        self.Scrolledtreeview1.heading("Orthodontics", text="Orthodontics")
        self.Scrolledtreeview1.heading("Orthodontics", anchor="center")
        self.Scrolledtreeview1.column("Orthodontics", width="100")
        self.Scrolledtreeview1.column("Orthodontics", minwidth="20")
        self.Scrolledtreeview1.column("Orthodontics", stretch="1")
        self.Scrolledtreeview1.column("Orthodontics", anchor="center")

        self.Scrolledtreeview1.heading("Surgery", text="Surgery")
        self.Scrolledtreeview1.heading("Surgery", anchor="center")
        self.Scrolledtreeview1.column("Surgery", width="100")
        self.Scrolledtreeview1.column("Surgery", minwidth="20")
        self.Scrolledtreeview1.column("Surgery", stretch="1")
        self.Scrolledtreeview1.column("Surgery", anchor="center")

        self.Scrolledtreeview1.heading("Pedodont", text="Pedodont")
        self.Scrolledtreeview1.heading("Pedodont", anchor="center")
        self.Scrolledtreeview1.column("Pedodont", width="100")
        self.Scrolledtreeview1.column("Pedodont", minwidth="20")
        self.Scrolledtreeview1.column("Pedodont", stretch="1")
        self.Scrolledtreeview1.column("Pedodont", anchor="center")

        self.Scrolledtreeview1.heading("Oral_Patho", text="Oral Patho")
        self.Scrolledtreeview1.heading("Oral_Patho", anchor="center")
        self.Scrolledtreeview1.column("Oral_Patho", width="100")
        self.Scrolledtreeview1.column("Oral_Patho", minwidth="20")
        self.Scrolledtreeview1.column("Oral_Patho", stretch="1")
        self.Scrolledtreeview1.column("Oral_Patho", anchor="center")

        self.Scrolledtreeview1.heading("Public_Health", text="Public Health")
        self.Scrolledtreeview1.heading("Public_Health", anchor="center")
        self.Scrolledtreeview1.column("Public_Health", width="100")
        self.Scrolledtreeview1.column("Public_Health", minwidth="20")
        self.Scrolledtreeview1.column("Public_Health", stretch="1")
        self.Scrolledtreeview1.column("Public_Health", anchor="center")

        self.Scrolledtreeview1.heading("Oral_Mea", text="Oral Mea")
        self.Scrolledtreeview1.heading("Oral_Mea", anchor="center")
        self.Scrolledtreeview1.column("Oral_Mea", width="100")
        self.Scrolledtreeview1.column("Oral_Mea", minwidth="20")
        self.Scrolledtreeview1.column("Oral_Mea", stretch="1")
        self.Scrolledtreeview1.column("Oral_Mea", anchor="center")

        self.Scrolledtreeview1.heading("Prostho", text="Prostho")
        self.Scrolledtreeview1.heading("Prostho", anchor="center")
        self.Scrolledtreeview1.column("Prostho", width="100")
        self.Scrolledtreeview1.column("Prostho", minwidth="20")
        self.Scrolledtreeview1.column("Prostho", stretch="1")
        self.Scrolledtreeview1.column("Prostho", anchor="center")

        self.Scrolledtreeview1.heading("Total", text="Total")
        self.Scrolledtreeview1.heading("Total", anchor="center")
        self.Scrolledtreeview1.column("Total", width="100")
        self.Scrolledtreeview1.column("Total", minwidth="20")
        self.Scrolledtreeview1.column("Total", stretch="1")
        self.Scrolledtreeview1.column("Total", anchor="center")

        # self.Scrolledlistbox3 = ScrolledListBox(Turnover_Single_Window)
        # self.Scrolledlistbox3.place(relx=0.02, rely=0.717, relheight=0.253
        #                             , relwidth=0.969)
        # self.Scrolledlistbox3.configure(background="white")
        # self.Scrolledlistbox3.configure(disabledforeground="#a3a3a3")
        # self.Scrolledlistbox3.configure(font=font10)
        # self.Scrolledlistbox3.configure(foreground="black")
        # self.Scrolledlistbox3.configure(highlightbackground="#d9d9d9")
        # self.Scrolledlistbox3.configure(highlightcolor="#d9d9d9")
        # self.Scrolledlistbox3.configure(selectbackground="#c4c4c4")
        # self.Scrolledlistbox3.configure(selectforeground="black")

        self.tr_radio = tk.IntVar(None, 1)

        self.Screened_Radio = tk.Radiobutton(Turnover_Single_Window)
        self.Screened_Radio.place(relx=0.013, rely=0.257, relheight=0.042, relwidth=0.10)
        self.Screened_Radio.configure(activebackground="#ececec")
        self.Screened_Radio.configure(activeforeground="#000000")
        self.Screened_Radio.configure(background="#d9d9d9")
        self.Screened_Radio.configure(disabledforeground="#a3a3a3")
        self.Screened_Radio.configure(font=font11)
        self.Screened_Radio.configure(foreground="#000000")
        self.Screened_Radio.configure(highlightbackground="#d9d9d9")
        self.Screened_Radio.configure(highlightcolor="black")
        self.Screened_Radio.configure(justify='left')
        self.Screened_Radio.configure(text='''Screened''')
        self.Screened_Radio.configure(value=1)
        self.Screened_Radio.configure(variable=self.tr_radio)

        self.Screened_Label = tk.Label(Turnover_Single_Window)
        self.Screened_Label.place(relx=0.12, rely=0.257, relheight=0.042, relwidth=0.08)
        self.Screened_Label.configure(background="#40b3a3")
        self.Screened_Label.configure(disabledforeground="#a3a3a3")
        self.Screened_Label.configure(font="-family {Helvetica} -size 10")
        self.Screened_Label.configure(foreground="#000000")
        self.Screened_Label.configure(highlightbackground="#d9d9d9")
        self.Screened_Label.configure(highlightcolor="black")
        self.Screened_Label.configure(relief="groove")

        self.Reffered_Radio = tk.Radiobutton(Turnover_Single_Window)
        self.Reffered_Radio.place(relx=0.208, rely=0.257, relheight=0.042
                                  , relwidth=0.10)
        self.Reffered_Radio.configure(activebackground="#ececec")
        self.Reffered_Radio.configure(activeforeground="#000000")
        self.Reffered_Radio.configure(background="#d9d9d9")
        self.Reffered_Radio.configure(disabledforeground="#a3a3a3")
        self.Reffered_Radio.configure(font=font11)
        self.Reffered_Radio.configure(foreground="#000000")
        self.Reffered_Radio.configure(highlightbackground="#d9d9d9")
        self.Reffered_Radio.configure(highlightcolor="black")
        self.Reffered_Radio.configure(justify='left')
        self.Reffered_Radio.configure(text='''Reffered''')
        self.Reffered_Radio.configure(value=2)
        self.Reffered_Radio.configure(variable=self.tr_radio)

        self.Reffered_Label = tk.Label(Turnover_Single_Window)
        self.Reffered_Label.place(relx=0.32, rely=0.257, relheight=0.042, relwidth=0.08)
        self.Reffered_Label.configure(background="#40b3a3")
        self.Reffered_Label.configure(disabledforeground="#a3a3a3")
        self.Reffered_Label.configure(font="-family {Helvetica} -size 10")
        self.Reffered_Label.configure(foreground="#000000")
        self.Reffered_Label.configure(highlightbackground="#d9d9d9")
        self.Reffered_Label.configure(highlightcolor="black")
        self.Reffered_Label.configure(relief="groove")

        self.Treated_Radio = tk.Radiobutton(Turnover_Single_Window)
        self.Treated_Radio.place(relx=0.408, rely=0.257, relheight=0.042, relwidth=0.10)
        self.Treated_Radio.configure(activebackground="#ececec")
        self.Treated_Radio.configure(activeforeground="#000000")
        self.Treated_Radio.configure(background="#d9d9d9")
        self.Treated_Radio.configure(disabledforeground="#a3a3a3")
        self.Treated_Radio.configure(font=font11)
        self.Treated_Radio.configure(foreground="#000000")
        self.Treated_Radio.configure(highlightbackground="#d9d9d9")
        self.Treated_Radio.configure(highlightcolor="black")
        self.Treated_Radio.configure(justify='left')
        self.Treated_Radio.configure(text='''Treated''')
        self.Treated_Radio.configure(value=3)
        self.Treated_Radio.configure(variable=self.tr_radio)

        self.Treated_Label = tk.Label(Turnover_Single_Window)
        self.Treated_Label.place(relx=0.52, rely=0.257, relheight=0.042, relwidth=0.08)
        self.Treated_Label.configure(background="#40b3a3")
        self.Treated_Label.configure(disabledforeground="#a3a3a3")
        self.Treated_Label.configure(font="-family {Helvetica} -size 10")
        self.Treated_Label.configure(foreground="#000000")
        self.Treated_Label.configure(highlightbackground="#d9d9d9")
        self.Treated_Label.configure(highlightcolor="black")
        self.Treated_Label.configure(relief="groove")

        self.Grand_Total_Label1 = tk.Label(Turnover_Single_Window)
        self.Grand_Total_Label1.place(relx=0.62, rely=0.257, relheight=0.042, relwidth=0.08)
        self.Grand_Total_Label1.configure(background="#d9d9d9")
        self.Grand_Total_Label1.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Label1.configure(font="-family {Helvetica} -size 10")
        self.Grand_Total_Label1.configure(foreground="#000000")
        self.Grand_Total_Label1.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Label1.configure(highlightcolor="black")
        # self.Grand_Total_Label1.configure(relief="groove")
        self.Grand_Total_Label1.configure(text="Grand Total:")

        self.Grand_Total_Label2 = tk.Label(Turnover_Single_Window)
        self.Grand_Total_Label2.place(relx=0.72, rely=0.257, relheight=0.042, relwidth=0.08)
        self.Grand_Total_Label2.configure(background="#40b3a3")
        self.Grand_Total_Label2.configure(disabledforeground="#a3a3a3")
        self.Grand_Total_Label2.configure(font="-family {Helvetica} -size 10")
        self.Grand_Total_Label2.configure(foreground="#000000")
        self.Grand_Total_Label2.configure(highlightbackground="#d9d9d9")
        self.Grand_Total_Label2.configure(highlightcolor="black")
        self.Grand_Total_Label2.configure(relief="groove")

        self.populate_list()

    # Returns the list of all the entries in the window
    def get_entry_object(self):
        Grand_Total_Entry = tk.IntVar(None, 1)
        entries = [
            self.ID_Entry,
            self.Date_Entry,
            self.tr_radio,
            # self.on_radio,
            self.Incharge_Entry,
            self.Phone_Entry,
            self.Patient_Name_Entry,
            self.Patient_Phone_Entry,
            self.He_radio,
            turnover_single_window_support.Endodontics,
            turnover_single_window_support.Periodont,
            turnover_single_window_support.Orthodontics,
            turnover_single_window_support.Surgery,
            turnover_single_window_support.Pedodont,
            turnover_single_window_support.Oralpatho,
            turnover_single_window_support.Public_Health,
            turnover_single_window_support.Oral_Mea,
            turnover_single_window_support.Prostho,
            Grand_Total_Entry
        ]
        return entries

    # Adds a row to the database' respective table by getting inputs from entries
    def add_item(self):
        # Getting the values entered in each Entry box objects
        entries = self.get_entry_object()
        if (self.Date_Entry.get()=='' or self.ID_Entry.get()=='' or self.Incharge_Entry.get()=='' or self.Phone_Entry.get()=='' or self.Patient_Name_Entry.get()==''):
            tk.messagebox.showerror("Error!","Please Fill All * Fields")
        else:
            for i in range(0, len(entries)):
                entries[i] = entries[i].get()
            # print(entries)
            self.data.insert("turnover", entries)
            self.clear_text()
            self.populate_list()
            print("1 row added")

        # Clears all the data entered in the entries

    def clear_text(self):
        entries = self.get_entry_object()
        self.He_radio.set(0)
        turnover_single_window_support.Endodontics.set(0)
        turnover_single_window_support.Periodont.set(0)
        turnover_single_window_support.Orthodontics.set(0)
        turnover_single_window_support.Surgery.set(0)
        turnover_single_window_support.Pedodont.set(0)
        turnover_single_window_support.Oralpatho.set(0)
        turnover_single_window_support.Public_Health.set(0)
        turnover_single_window_support.Oral_Mea.set(0)
        turnover_single_window_support.Prostho.set(0)
        for i in range(0, len(entries)):
            try:
                if i != 1:
                    entries[i].delete(0, tk.END)
            except AttributeError:
                pass

        # Returns the item selected in the listbox

    def select_item(self):
        index = self.Scrolledtreeview1.focus()
        selected_item = self.Scrolledtreeview1.item(index)
        return selected_item

        # Removes the item selected in the listbox

    def remove_item(self):
        selected = self.select_item()
        new_values = selected["values"]
        # print(new_values)
        self.data.remove("turnover", new_values[0], new_values[1])
        self.populate_list()
        print("Selected Item deleted")

        # Updates the item selected in list box with the values entered in Entry boxes

    def update_item(self):
        selected = self.select_item()
        values = self.get_entry_object()
        # print(selected)
        # print(values)
        # Id of new_values is as same as the old value
        # new_values = [selected[0], selected[1]]
        new_values1 = selected["values"]
        new_values = [new_values1[0], new_values1[1]]
        # for val in values[2:]:
        #     new_values.append(val.get())
        for i in range(2,len(new_values1)):
            if values[i].get()=='':
                new_values.append(new_values1[i])
            else:
                new_values.append(values[i].get())
        # print(new_values)
        self.data.update("turnover", new_values)
        self.clear_text()
        self.populate_list()
        print("Selected Item Updated")

    # Updates the list box with the current content of the table
    def populate_list(self):
        i=1
        # self.Scrolledtreeview1.delete(0, tk.END)
        self.Scrolledtreeview1.delete(*self.Scrolledtreeview1.get_children())
        for row in self.data.fetch("turnover"):
            self.Scrolledtreeview1.insert("",'end',text=i,value=row)
            i=i+1

        label_list = [
            self.Endodontics_Label,
            self.Periodont_Label,
            self.Orthodontics_Label,
            self.Surgery_Label,
            self.Pedodont_Label,
            self.Oralpatho_Label,
            self.Public_Health_Label,
            self.Oral_Mea_Label,
            self.Prostho_Label,
            self.Grand_Total_Label
        ]
        counts = self.data.get_total("turnover", self.data.turnover[8:], self.Date_Entry.get(), self.tr_radio.get())
        for label in range(len(label_list)):
            label_list[label].configure(text = "%d patients" %(0 if counts[label] == None else counts[label]))

        tot,h,s,r,t = self.data.turn_Func(self.Date_Entry.get())
        self.Grand_Total_Label2.configure(text="%d patient" %(tot))
        self.Health_Label.configure(text="%d patient" %(h))
        self.Screened_Label.configure(text="%d patient" %(s))
        self.Treated_Label.configure(text="%d patient" %(t))
        self.Reffered_Label.configure(text="%d patient" %(r))



    def turnover(self):
        try:
            turnover_window.create_Toplevel1(rt)
        except:
            turnover_window.create_Toplevel1(root)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()





