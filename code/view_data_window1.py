#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Mar 06, 2020 11:24:56 AM IST  platform: Windows NT

import sys
from tkcalendar import DateEntry
import datetime

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import view_data_window1_support
import matplotlib.pyplot as plt
from db import Database
import os

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    view_data_window1_support.set_Tk_var()
    top = view_data_window (root)
    view_data_window1_support.init(root, top)
    root.mainloop()

w = None
def create_view_data_window(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    view_data_window1_support.set_Tk_var()
    top = view_data_window (w)
    view_data_window1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_view_data_window():
    global w
    w.destroy()
    w = None

class view_data_window:
    def print_word(self):
            databaseobj=Database("dental.db")
            self.date=self.WDate_Entry.get()
            databaseobj.createword(self.date)
    def print_excel(self):
            databaseobj=Database("dental.db")
            self.fromdate=self.EFrom_Date_Entry.get()
            self.todate=self.ETo_Date_Entry.get()
            self.trvalue=self.EPatient_Type_Drop.get()
            if(self.ETable_Name_Drop.get()=="Department" and self.EPatient_Type_Drop.get()=="All"):
                    databaseobj.createexcel("dept",self.fromdate,self.todate)
            if(self.ETable_Name_Drop.get()=="Department" and self.EPatient_Type_Drop.get()=="Screened"):
                    databaseobj.createexcel("dept",self.fromdate,self.todate,TR=1)
            if(self.ETable_Name_Drop.get()=="Department" and self.EPatient_Type_Drop.get()=="Referred"):
                    databaseobj.createexcel("dept",self.fromdate,self.todate,TR=2)
            if(self.ETable_Name_Drop.get()=="Department" and self.EPatient_Type_Drop.get()=="Treated"):
                    databaseobj.createexcel("dept",self.fromdate,self.todate,TR=3)
            if(self.ETable_Name_Drop.get()=="Dental Camp" and self.EPatient_Type_Drop.get()=="All"):
                   databaseobj.createexcel("screen",self.fromdate,self.todate) 
            if(self.ETable_Name_Drop.get()=="Dental Camp" and self.EPatient_Type_Drop.get()=="Screened"):
                   databaseobj.createexcel("screen",self.fromdate,self.todate,TR=1)
            if(self.ETable_Name_Drop.get()=="Dental Camp" and self.EPatient_Type_Drop.get()=="Referred"):
                   databaseobj.createexcel("screen",self.fromdate,self.todate,TR=2)
            if(self.ETable_Name_Drop.get()=="Dental Camp" and self.EPatient_Type_Drop.get()=="Treated"):
                   databaseobj.createexcel("screen",self.fromdate,self.todate,TR=3)   
            if(self.ETable_Name_Drop.get()=="Turnover" and self.EPatient_Type_Drop.get()=="All"):
                    databaseobj.createexcel("turnover",self.fromdate,self.todate)
            if(self.ETable_Name_Drop.get()=="Turnover" and self.EPatient_Type_Drop.get()=="Screened"):
                    databaseobj.createexcel("turnover",self.fromdate,self.todate,TR=1)
            if(self.ETable_Name_Drop.get()=="Turnover" and self.EPatient_Type_Drop.get()=="Referred"):
                    databaseobj.createexcel("turnover",self.fromdate,self.todate,TR=2)
            if(self.ETable_Name_Drop.get()=="Turnover" and self.EPatient_Type_Drop.get()=="Treated"):
                    databaseobj.createexcel("turnover",self.fromdate,self.todate,TR=3)
            if(self.ETable_Name_Drop.get()=="Satellite" and self.EPatient_Type_Drop.get()=="All"):
                    databaseobj.createexcel("satellite",self.fromdate,self.todate)
            if(self.ETable_Name_Drop.get()=="Satellite" and self.EPatient_Type_Drop.get()=="Screened"):
                    databaseobj.createexcel("satellite",self.fromdate,self.todate,TR=1)
            if(self.ETable_Name_Drop.get()=="Satellite" and self.EPatient_Type_Drop.get()=="Referred"):
                    databaseobj.createexcel("satellite",self.fromdate,self.todate,TR=2)
            if(self.ETable_Name_Drop.get()=="Satellite" and self.EPatient_Type_Drop.get()=="Treated"):
                    databaseobj.createexcel("satellite",self.fromdate,self.todate,TR=3)
    def print_graph(self):
            databaseobj=Database("dental.db")
            self.fromdate=self.GFrom_Date_Entry.get()
            self.todate=self.GTo_Date_Entry.get()
            self.grp=self.GGroup_By_Drop.get()
        #     if(self.GTable_Name_Drop.get()=="All" and self.grp=='By Month'):
        #             self.x1values,self.y1values=databaseobj.get_by_date("dept",self.fromdate,self.todate,"m")
        #             plt.plot(self.x1values,self.y1values,color="red",label="Department")
        #             self.x2values,self.y2values=databaseobj.get_by_date("screen",self.fromdate,self.todate,"m")
        #             plt.plot(self.x2values,self.y2values,color="blue",label="Dental Camp")
        #             self.x3values,self.y3values=databaseobj.get_by_date("turnover",self.fromdate,self.todate,"m")
        #             plt.plot(self.x3values,self.y3values,color="green",label="Turnover")
        #             self.x4values,self.y4values=databaseobj.get_by_date("satellite",self.fromdate,self.todate,"m")
        #             plt.plot(self.x4values,self.y4values,color="yellow",label="Satellite centres")
        #             #plt.xlabel("Date")
        #             #plt.ylabel("Patients")
        #             #plt.grid()
        #             plt.legend(loc="lower right", title="Legend Title", frameon=False)
        #             plt.show()
            if(self.GTable_Name_Drop.get()=="Department" and self.grp=='By Month'):
                    self.xvalues,self.yvalues=databaseobj.get_by_date("dept",self.fromdate,self.todate,"m")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Department" and self.grp=='By Year'):
                    self.xvalues,self.yvalues=databaseobj.get_by_date("dept",self.fromdate,self.todate,"y")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Dental Camp" and self.grp=='By Month'):
                    #print("inside if of dental camp")
                    self.xvalues,self.yvalues=databaseobj.get_by_date("screen",self.fromdate,self.todate,"m")
                    # print(self.xvalues, self.yvalues)
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Dental Camp" and self.grp=='By Year'):
                    # print("inside if of dental camp")
                    self.xvalues,self.yvalues=databaseobj.get_by_date("screen",self.fromdate,self.todate,"y")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Turnover"  and self.grp=='By Month'):
                    self.xvalues,self.yvalues=databaseobj.get_by_date("turnover",self.fromdate,self.todate,"m")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Turnover"  and self.grp=='By Year'):
                    self.xvalues,self.yvalues=databaseobj.get_by_date("turnover",self.fromdate,self.todate,"y")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Satellite" and  self.grp=='By Month'):
                    self.xvalues,self.yvalues=databaseobj.get_by_date("satellite",self.fromdate,self.todate,"m")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
            if(self.GTable_Name_Drop.get()=="Satellite" and  self.grp=='By Year'):
                    self.xvalues,self.yvalues=databaseobj.get_by_date("satellite",self.fromdate,self.todate,"y")
                    plt.plot(self.xvalues,self.yvalues)
                    plt.xlabel("Date")
                    plt.ylabel("Patients")
                    plt.grid()
                    plt.show()
    def __init__(self, View_Data_Window=None):
        '''This class configures and populates the toplevel window.
           View_Data_Window is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font10 = "-family {Helvatica} -size 13 -weight normal -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        View_Data_Window.geometry("1491x739+35+31")
        View_Data_Window.minsize(148, 1)
        View_Data_Window.maxsize(4112, 1330)
        View_Data_Window.resizable(1, 1)
        View_Data_Window.title("VIEW DATA")
        View_Data_Window.configure(background="#40b3a3")

        self.menubar = tk.Menu(View_Data_Window, font=font9, bg=_bgcolor, fg=_fgcolor)
        View_Data_Window.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(View_Data_Window, tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                foreground="#000000",
                label="Exit",
                command=view_data_window1_support.destroy_window)

        self.TSeparator1 = ttk.Separator(View_Data_Window)
        self.TSeparator1.place(relx=0.355, rely=0.0, relheight=1.001)
        self.TSeparator1.configure(orient="vertical")

        self.TSeparator2 = ttk.Separator(View_Data_Window)
        self.TSeparator2.place(relx=0.0, rely=0.46, relwidth=0.355)

        self.TSeparator3 = ttk.Separator(View_Data_Window)
        self.TSeparator3.place(relx=0.355, rely=0.46, relwidth=1.0)

        self.ETable_Name_Drop = ttk.Combobox(View_Data_Window)
        self.ETable_Name_Drop.place(relx=0.034, rely=0.095, relheight=0.035
                , relwidth=0.125)
        self.ETable_Name_Drop.configure(textvariable=view_data_window1_support.Ecombobox1)
        self.ETable_Name_Drop.configure(takefocus="")
        self.ETable_Name_Drop.configure(values=("All","Department","Dental Camp","Turn Over","Satellite"))

        self.EPatient_Type_Drop = ttk.Combobox(View_Data_Window)
        self.EPatient_Type_Drop.place(relx=0.181, rely=0.095, relheight=0.035
                                      , relwidth=0.125)
        self.EPatient_Type_Drop.configure(textvariable=view_data_window1_support.Ecombobox2)
        self.EPatient_Type_Drop.configure(takefocus="")
        self.EPatient_Type_Drop.configure(values=("All","Treated","Reffered","Screened"))

        self.Excel_Label = tk.Label(View_Data_Window)
        self.Excel_Label.place(relx=0.034, rely=0.014, relheight=0.062
                , relwidth=0.276)
        self.Excel_Label.configure(background="#d9d9d9")
        self.Excel_Label.configure(font="font10")
        self.Excel_Label.configure(disabledforeground="#a3a3a3")
        self.Excel_Label.configure(foreground="#000000")
        self.Excel_Label.configure(relief="raised")
        self.Excel_Label.configure(text='''Excel View''')

        self.EFrom_Date_Label = tk.Label(View_Data_Window)
        self.EFrom_Date_Label.place(relx=0.034, rely=0.162, relheight=0.049, relwidth=0.122)
        self.EFrom_Date_Label.configure(font="font10")
        self.EFrom_Date_Label.configure(background="#d9d9d9")
        self.EFrom_Date_Label.configure(disabledforeground="#a3a3a3")
        self.EFrom_Date_Label.configure(foreground="#000000")
        self.EFrom_Date_Label.configure(text='''From Date:''')

        now = datetime.datetime.now()
        self.EFrom_Date_Entry = DateEntry(View_Data_Window, year=now.year, month=now.month, day=now.day)
        self.EFrom_Date_Entry.place(relx=0.168, rely=0.162, relheight=0.046, relwidth=0.137)
        self.EFrom_Date_Entry.configure(background="white")
        self.EFrom_Date_Entry.configure(date_pattern='y-mm-dd')
        self.EFrom_Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.EFrom_Date_Entry.configure(foreground="#000000")
        self.EFrom_Date_Entry.configure(borderwidth=2)
        self.EFrom_Date_Entry.configure(width=12)

        self.ETo_Date_Label = tk.Label(View_Data_Window)
        self.ETo_Date_Label.place(relx=0.034, rely=0.23, relheight=0.049, relwidth=0.122)
        self.ETo_Date_Label.configure(activebackground="#f9f9f9")
        self.ETo_Date_Label.configure(font="font10")
        self.ETo_Date_Label.configure(activeforeground="black")
        self.ETo_Date_Label.configure(background="#d9d9d9")
        self.ETo_Date_Label.configure(disabledforeground="#a3a3a3")
        self.ETo_Date_Label.configure(foreground="#000000")
        self.ETo_Date_Label.configure(highlightbackground="#d9d9d9")
        self.ETo_Date_Label.configure(highlightcolor="black")
        self.ETo_Date_Label.configure(text='''To Date:''')

        now1 = datetime.datetime.now()
        self.ETo_Date_Entry = DateEntry(View_Data_Window, year=now1.year, month=now1.month, day=now1.day)
        self.ETo_Date_Entry.place(relx=0.168, rely=0.23, relheight=0.046, relwidth=0.137)
        self.ETo_Date_Entry.configure(background="white")
        self.ETo_Date_Entry.configure(date_pattern='y-mm-dd')
        self.ETo_Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.ETo_Date_Entry.configure(foreground="#000000")
        self.ETo_Date_Entry.configure(borderwidth=2)
        self.ETo_Date_Entry.configure(width=12)

        self.Gen_Excel_Button = tk.Button(View_Data_Window)
        self.Gen_Excel_Button.place(relx=0.114, rely=0.311, relheight=0.045, relwidth=0.111)
        self.Gen_Excel_Button.configure(font="font10")
        self.Gen_Excel_Button.configure(activebackground="#ececec")
        self.Gen_Excel_Button.configure(activeforeground="#000000")
        self.Gen_Excel_Button.configure(background="#d9d9d9")
        self.Gen_Excel_Button.configure(disabledforeground="#a3a3a3")
        self.Gen_Excel_Button.configure(foreground="#000000")
        self.Gen_Excel_Button.configure(highlightbackground="#d9d9d9")
        self.Gen_Excel_Button.configure(highlightcolor="black")
        self.Gen_Excel_Button.configure(pady="0")
        self.Gen_Excel_Button.configure(text='''Generate Excel''')
        self.Gen_Excel_Button.configure(command=self.print_excel)

        self.Word_Label = tk.Label(View_Data_Window)
        self.Word_Label.place(relx=0.034, rely=0.487, relheight=0.062, relwidth=0.276)
        self.Word_Label.configure(activebackground="#f9f9f9")
        self.Word_Label.configure(font="font10")
        self.Word_Label.configure(activeforeground="black")
        self.Word_Label.configure(background="#d9d9d9")
        self.Word_Label.configure(disabledforeground="#a3a3a3")
        self.Word_Label.configure(foreground="#000000")
        self.Word_Label.configure(highlightbackground="#d9d9d9")
        self.Word_Label.configure(highlightcolor="black")
        self.Word_Label.configure(relief="raised")
        self.Word_Label.configure(text='''Camp Report ''')

        self.WDate_Label = tk.Label(View_Data_Window)
        self.WDate_Label.place(relx=0.034, rely=0.622, relheight=0.049, relwidth=0.122)
        self.WDate_Label.configure(activebackground="#f9f9f9")
        self.WDate_Label.configure(font="font10")
        self.WDate_Label.configure(activeforeground="black")
        self.WDate_Label.configure(background="#d9d9d9")
        self.WDate_Label.configure(disabledforeground="#a3a3a3")
        self.WDate_Label.configure(foreground="#000000")
        self.WDate_Label.configure(highlightbackground="#d9d9d9")
        self.WDate_Label.configure(highlightcolor="black")
        self.WDate_Label.configure(text='''Date:''')

        now2 = datetime.datetime.now()
        self.WDate_Entry = DateEntry(View_Data_Window, year=now2.year, month=now2.month, day=now2.day)
        self.WDate_Entry.place(relx=0.168, rely=0.622, relheight=0.046
                , relwidth=0.137)
        self.WDate_Entry.configure(background="white")
        self.WDate_Entry.configure(date_pattern='y-mm-dd')
        self.WDate_Entry.configure(font="-family {Helvetica} -size 10")
        self.WDate_Entry.configure(foreground="#000000")
        self.WDate_Entry.configure(borderwidth=2)
        self.WDate_Entry.configure(width=12)

        self.Gen_Word_Button = tk.Button(View_Data_Window)
        self.Gen_Word_Button.place(relx=0.131, rely=0.785, relheight=0.045, relwidth=0.111)
        self.Gen_Word_Button.configure(activebackground="#ececec")
        self.Gen_Word_Button.configure(font="font10")
        self.Gen_Word_Button.configure(activeforeground="#000000")
        self.Gen_Word_Button.configure(background="#d9d9d9")
        self.Gen_Word_Button.configure(disabledforeground="#a3a3a3")
        self.Gen_Word_Button.configure(foreground="#000000")
        self.Gen_Word_Button.configure(highlightbackground="#d9d9d9")
        self.Gen_Word_Button.configure(highlightcolor="black")
        self.Gen_Word_Button.configure(pady="0")
        self.Gen_Word_Button.configure(text='''Generate Word''')
        
        self.Gen_Word_Button.configure(command=self.print_word)

        self.Graph_Label = tk.Label(View_Data_Window)
        self.Graph_Label.place(relx=0.543, rely=0.014, relheight=0.062, relwidth=0.276)
        self.Graph_Label.configure(activebackground="#f9f9f9")
        self.Graph_Label.configure(font="font10")
        self.Graph_Label.configure(activeforeground="black")
        self.Graph_Label.configure(background="#d9d9d9")
        self.Graph_Label.configure(disabledforeground="#a3a3a3")
        self.Graph_Label.configure(foreground="#000000")
        self.Graph_Label.configure(highlightbackground="#d9d9d9")
        self.Graph_Label.configure(highlightcolor="black")
        self.Graph_Label.configure(relief="raised")
        self.Graph_Label.configure(text='''Graph View''')

        self.GTable_Name_Drop = ttk.Combobox(View_Data_Window)
        self.GTable_Name_Drop.place(relx=0.416, rely=0.122, relheight=0.035
                , relwidth=0.125)
        self.GTable_Name_Drop.configure(textvariable=view_data_window1_support.Gcombobox1)
        self.GTable_Name_Drop.configure(takefocus="")
        self.GTable_Name_Drop.configure(values=("All","Department","Dental Camp","Turn Over","Satellite"))

        self.GGroup_By_Drop = ttk.Combobox(View_Data_Window)
        self.GGroup_By_Drop.place(relx=0.805, rely=0.122, relheight=0.035
                , relwidth=0.125)
        self.GGroup_By_Drop.configure(textvariable=view_data_window1_support.Gcombobox3)
        self.GGroup_By_Drop.configure(takefocus="")
        self.GGroup_By_Drop.configure(values=("All","By Month","By Year","By Decade"))

        self.GFrom_Date_Label = tk.Label(View_Data_Window)
        self.GFrom_Date_Label.place(relx=0.396, rely=0.23, relheight=0.049, relwidth=0.122)
        self.GFrom_Date_Label.configure(activebackground="#f9f9f9")
        self.GFrom_Date_Label.configure(font="font10")
        self.GFrom_Date_Label.configure(activeforeground="black")
        self.GFrom_Date_Label.configure(background="#d9d9d9")
        self.GFrom_Date_Label.configure(disabledforeground="#a3a3a3")
        self.GFrom_Date_Label.configure(foreground="#000000")
        self.GFrom_Date_Label.configure(highlightbackground="#d9d9d9")
        self.GFrom_Date_Label.configure(highlightcolor="black")
        self.GFrom_Date_Label.configure(text='''From Date:''')

        self.GTo_Date_Label = tk.Label(View_Data_Window)
        self.GTo_Date_Label.place(relx=0.691, rely=0.23, relheight=0.049, relwidth=0.122)
        self.GTo_Date_Label.configure(activebackground="#f9f9f9")
        self.GTo_Date_Label.configure(font="font10")
        self.GTo_Date_Label.configure(activeforeground="black")
        self.GTo_Date_Label.configure(background="#d9d9d9")
        self.GTo_Date_Label.configure(disabledforeground="#a3a3a3")
        self.GTo_Date_Label.configure(foreground="#000000")
        self.GTo_Date_Label.configure(highlightbackground="#d9d9d9")
        self.GTo_Date_Label.configure(highlightcolor="black")
        self.GTo_Date_Label.configure(text='''To Date:''')

        now3 = datetime.datetime.now()
        self.GFrom_Date_Entry = DateEntry(View_Data_Window, year=now3.year, month=now3.month, day=now3.day)
        self.GFrom_Date_Entry.place(relx=0.53, rely=0.23, relheight=0.046
                , relwidth=0.137)
        self.GFrom_Date_Entry.configure(background="white")
        self.GFrom_Date_Entry.configure(date_pattern='y-mm-dd')
        self.GFrom_Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.GFrom_Date_Entry.configure(foreground="#000000")
        self.GFrom_Date_Entry.configure(borderwidth=2)
        self.GFrom_Date_Entry.configure(width=12)

        now4 = datetime.datetime.now()
        self.GTo_Date_Entry = DateEntry(View_Data_Window, year=now4.year, month=now4.month, day=now4.day)
        self.GTo_Date_Entry.place(relx=0.825, rely=0.23, relheight=0.046
                , relwidth=0.137)
        self.GTo_Date_Entry.configure(background="white")
        self.GTo_Date_Entry.configure(date_pattern='y-mm-dd')
        self.GTo_Date_Entry.configure(font="-family {Helvetica} -size 10")
        self.GTo_Date_Entry.configure(foreground="#000000")
        self.GTo_Date_Entry.configure(borderwidth=2)
        self.GTo_Date_Entry.configure(width=12)

        self.Gen_Graph_Button = tk.Button(View_Data_Window)
        self.Gen_Graph_Button.place(relx=0.396, rely=0.352, relheight=0.045, relwidth=0.111)
        self.Gen_Graph_Button.configure(activebackground="#ececec")
        self.Gen_Graph_Button.configure(font="font10")
        self.Gen_Graph_Button.configure(activeforeground="#000000")
        self.Gen_Graph_Button.configure(background="#d9d9d9")
        self.Gen_Graph_Button.configure(disabledforeground="#a3a3a3")
        self.Gen_Graph_Button.configure(foreground="#000000")
        self.Gen_Graph_Button.configure(highlightbackground="#d9d9d9")
        self.Gen_Graph_Button.configure(highlightcolor="black")
        self.Gen_Graph_Button.configure(pady="0")
        self.Gen_Graph_Button.configure(text='''Generate Graph''')
        self.Gen_Graph_Button.configure(command=self.print_graph)

        self.Word_Label2 = tk.Label(View_Data_Window)
        self.Word_Label2.place(relx=0.543, rely=0.487, relheight=0.062, relwidth=0.276)
        self.Word_Label2.configure(activebackground="#f9f9f9")
        self.Word_Label2.configure(font="font10")
        self.Word_Label2.configure(activeforeground="black")
        self.Word_Label2.configure(background="#d9d9d9")
        self.Word_Label2.configure(disabledforeground="#a3a3a3")
        self.Word_Label2.configure(foreground="#000000")
        self.Word_Label2.configure(highlightbackground="#d9d9d9")
        self.Word_Label2.configure(highlightcolor="black")
        self.Word_Label2.configure(relief="raised")
        self.Word_Label2.configure(text='''Sensus Report''')

        self.WTable_Name_Drop2 = ttk.Combobox(View_Data_Window)
        self.WTable_Name_Drop2.place(relx=0.416, rely=0.585, relheight=0.035
                                    , relwidth=0.125)
        self.WTable_Name_Drop2.configure(textvariable=view_data_window1_support.Wscombox)
        self.WTable_Name_Drop2.configure(takefocus="")
        self.WTable_Name_Drop2.configure(values=("All", "Department", "Department-Health Education", "Department-Old Patient", "Department-New Patient", "Dental Camp",  "Turn Over", "Satellite"))

        self.WFrom_Date_Label2 = tk.Label(View_Data_Window)
        self.WFrom_Date_Label2.place(relx=0.396, rely=0.65, relheight=0.049, relwidth=0.122)
        self.WFrom_Date_Label2.configure(activebackground="#f9f9f9")
        self.WFrom_Date_Label2.configure(font="font10")
        self.WFrom_Date_Label2.configure(activeforeground="black")
        self.WFrom_Date_Label2.configure(background="#d9d9d9")
        self.WFrom_Date_Label2.configure(disabledforeground="#a3a3a3")
        self.WFrom_Date_Label2.configure(foreground="#000000")
        self.WFrom_Date_Label2.configure(highlightbackground="#d9d9d9")
        self.WFrom_Date_Label2.configure(highlightcolor="black")
        self.WFrom_Date_Label2.configure(text=''' Year:''')

        self.Date_Entry = tk.Entry(View_Data_Window)
        self.Date_Entry.place(relx=0.53, rely=0.65, relheight=0.046
                                    , relwidth=0.137)
        self.Date_Entry.configure(background="#ffffff")
        self.Date_Entry.configure(font="font10")
        self.Date_Entry.configure(disabledforeground="#a3a3a3")
        self.Date_Entry.configure(foreground="#000000")

        self.Gen_Sensus_Button = tk.Button(View_Data_Window)
        self.Gen_Sensus_Button.place(relx=0.396, rely=0.785, relheight=0.045, relwidth=0.111)
        self.Gen_Sensus_Button.configure(activebackground="#ececec")
        self.Gen_Sensus_Button.configure(font="font10")
        self.Gen_Sensus_Button.configure(activeforeground="#000000")
        self.Gen_Sensus_Button.configure(background="#d9d9d9")
        self.Gen_Sensus_Button.configure(disabledforeground="#a3a3a3")
        self.Gen_Sensus_Button.configure(foreground="#000000")
        self.Gen_Sensus_Button.configure(highlightbackground="#d9d9d9")
        self.Gen_Sensus_Button.configure(highlightcolor="black")
        self.Gen_Sensus_Button.configure(pady="0")
        self.Gen_Sensus_Button.configure(text='''Generate Sensus''')
        # self.Gen_Sensus_Button.configure(command=self.print_graph)


if __name__ == '__main__':
    vp_start_gui()





